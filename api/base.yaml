---
openapi: 3.0.2
info:
  title: Discovery and Synchronization Service
  version: 0.0.2
  description: |-
    Interface to Discovery and Synchronization Service and service providers used by participating clients to discover and inform other service providers.

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

    This API contains both remote ID and UTM concepts.  For audiences solely interested in remote ID, ignore:
    * All elements marked `[UTM only]`
    * Everything mentioning Constraint, Operation, AirspaceAwareness, Deconfliction, or Key
paths:
  /configuration:
    summary: Configuration of a DAR participant's portion of the DAR.
    get:
      tags:
      - config
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDARConfigurationResponse'
          description: Configuration information was successfully retrieved.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.dar_configuration
      summary: /configuration
      description: |-
        Retrieve all information necessary to interoperate with the portion of the DAR provided by this provider.  This endpoint will nominally only be used when a change is made to the distributed DAR system configuration.

        When a provider is approved by the jurisdictional authority, they will provide a URL to and endpoint with this API that the jurisdictional authority will distribute to all other providers.
components:
  schemas:
    DeconflictionKey:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current DeconflictionKey-constructed from information obtained with a previous read operation and subsequent requests for full information, and optionally, subscription updates—for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: object
      properties:
        signatures:
          anyOf:
          - $ref: '#/components/schemas/SignatureDictionary'
          description: For each of a subset of Entities declared by the DSS in the
            area of interest, the signature of the current version of the full information
            of that Entity.  This EntitySignature is provided by the client who defined
            the Entity, accompanying the full Entity definition data when that data
            is received.
        hashes:
          anyOf:
          - $ref: '#/components/schemas/DeconflictionKeyHash'
          description: Optional (optimization).  May be provided for a set of Entities
            so that each of the included EntitySignatures does not need to be included
            in the `signatures` property.
        subscription:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: If the client obtained the information in this DeconflictionKey
            via a subscription, this field is set to the ID of that subscription so
            the usage of subscriptions can be tracked and unused subscriptions can
            be removed.
    DeconflictionKeyHash:
      description: A shortcut (optimization) data structure that may be provided instead
        of a large set of individually-listed EntitySignatures.
      required:
      - entity_ids
      - entity_signatures
      type: object
      properties:
        entity_ids:
          anyOf:
          - $ref: '#/components/schemas/Hash'
          description: Hash of an ordered list of other clients’ EntityUUIDs in the
            airspace (obtained from DSS via GET ~/entities) excluding the EntityUUIDs
            explicitly specified in DeconflictionKey's `signatures` property.
        entity_signatures:
          anyOf:
          - $ref: '#/components/schemas/Hash'
          description: Hash of an ordered list of EntitySignatures that correspond
            with the list of EntityUUIDs used to generate the `entity_ids` property
            value.
    Volume3D:
      description: A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
      - footprint
      type: object
      properties:
        footprint:
          anyOf:
          - $ref: '#/components/schemas/GeoPolygon'
          description: Projection of this volume onto the earth's surface.
        altitude_lo:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Minimum bounding altitude of this volume.
        altitude_hi:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Maximum bounding altitude of this volume.
    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - spatial_volume
      type: object
      properties:
        spatial_volume:
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
          description: Constant spatial extent of this volume.
        time_start:
          format: date-time
          description: Beginning time of this volume.  RFC 3339 format, per OpenAPI
            specification.
          type: string
        time_end:
          format: date-time
          description: End time of this volume.  RFC 3339 format, per OpenAPI specification.
          type: string
    AuthorizationScope:
      description: The scope included in an access token used to access one of the
        endpoints in this API.
      enum:
      - dss.read.position_reporting_entities
      - dss.write.position_reporting_entities
      - dss.read.airspace_awareness
      - dss.write.airspace_awareness
      - dss.write.operation
      type: string
    URL:
      description: Valid http or https URL.
      pattern: '^https?:\/\/(?:\[[0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{0,4}){2,7}\]|[^\0\t\r\n
        #%\/:?@[\\\]]{1,63}(?:\.[^\0\t\r\n #%\/:?@[\\\]]{1,63}){1,126})(?::\d{1,5})?\/?'
      type: string
    Hash:
      description: Base64 representation of a SHA256 hash of the given inner content.  If
        this Hash is for multiple entries, the entries should be concatenated together
        with delimiting commas (but no spaces) before performing the hash.  For instance,
        the Hash of the three UUIDs 4704a043-8212-4256-9dec-7ef5a79218e2, b1220203-fc2a-422d-9604-12464a9b45e0,
        and cca95e90-3163-47d8-bb0e-a7c5c88f078f would be d8NoNy0cPAd7D3b8Qb0DSzcrBVJElwBfmqVcytIoWsk=
        in base64 which is 77c368372d1c3c077b0f76fc41bd034b372b05524497005f9aa55ccad2285ac9
        in hexadecimal.
      maxLength: 44
      minLength: 44
      pattern: ^[0-9a-zA-Z+\/]{43}=$
      type: string
      example: d8NoNy0cPAd7D3b8Qb0DSzcrBVJElwBfmqVcytIoWsk=
    RIDFlightsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which the remote ID flights and their details may be retrieved.  See `/flights`, `/flights/{id}`, and `/flights/{id}/details` paths for specification of this endpoint.
        This URL is the base flights resource.  If this URL is specified as https://example.com/flights then the flight information for a particular {id} may be obtained at the URL https://example.com/flights/{id}.  This URL may not have a trailing / character.
      pattern: '[^\/]$'
      type: string
      example: https://example.com/flights
    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer
    SubscriptionState:
      description: State of AreaSubscription which is causing a notification to be
        sent.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
    UUIDv4:
      description: UUID v4.
      maxLength: 36
      minLength: 36
      pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
      type: string
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
    EntityUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for an Entity communicated through
        the DSS.  Formatted as UUIDv4.
    SubscriptionUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for a Subscription communicated through
        the DSS.  Formatted as UUIDv4.
    Token:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier associated with a specific set of
        data.
    RIDFlightID:
      description: ID, unique to a remote ID service provider, which identifies a
        particular flight for which the remote ID service provider is providing remote
        ID services.
      maxLength: 255
      minLength: 1
      pattern: ^[^\0\t\r\n#%\/:?@[\\\]]+$
      type: string
      example: uss1.JA6kHYCcByQ-6AfU
    RIDAircraftType:
      description: |-
        Type of aircraft for the purposes of remote ID.

        'LTA' means 'Lighter Than Air'.  `LTAUnpowered` is a balloon.  `VTOL` is a fixed wing aircraft that can take off vertically.
      enum:
      - NotDeclared
      - FixedWingPowered
      - Rotorcraft
      - Multirotor
      - LTAPowered
      - LTAUnpowered
      - VTOL
      - FreeFall
      - Parachute
      - Rocket
      - Glider
      - Tethered
      - GroundObstacle
      - Other
      type: string
    RIDAuthData:
      description: Additional authentication data.
      required:
      - format
      - data
      type: object
      properties:
        format:
          description: Format of additional authentication data.
          type: string
        data:
          description: Authentication data in form specified by `format`.
          type: string
    HorizontalAccuracy:
      description: |-
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAs.

        `HAUnknown`: Unknown horizontal accuracy

        `HA10NMPlus`: > 10NM (18.52km)

        `HA10NM`: < 10NM (18.52km)

        `HA4NM`: < 4NM (7.408km)

        `HA2NM`: < 2NM (3.704km)

        `HA1NM`: < 1NM (1852m)

        `HA05NM`: < 0.5NM (926m)

        `HA03NM`: < 0.3NM (555.6m)

        `HA01NM`: < 0.1NM (185.2m)

        `HA005NM`: < 0.05NM (92.6m)

        `HA30m`: < 30m

        `HA10m`: < 10m

        `HA3m`: < 3m

        `HA1m`: < 1m
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m
      type: string
    VerticalAccuracy:
      description: |-
        This is the GVA enumeration from ADS-B, plus some finer values for UAs.

        `VAUnknown`: Unknown vertical accuracy

        `VA150mPlus`: > 150m

        `VA150m`: < 150m

        `VA45m`: < 45m

        `VA25m`: < 25m

        `VA10m`: < 10m

        `VA3m`: < 3m

        `VA1m`: < 1m
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m
      type: string
    ErrorResponse:
      description: Data provided when an off-nominal condition was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
    EntitySignature:
      title: EntitySignature
      description: A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an EntityReference and provided
        to the client creating or modifying the EntityReference.  The EntitySignature
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntitySignature is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version increases each time an Entity is modified.  If
            a client ever receives a subscription update with an EntitySignature for
            a particular EntityUUID that is smaller than the cached EntitySignature
            for that EntityUUID, that subscription update should be ignored.
          type: integer
        token:
          anyOf:
          - $ref: '#/components/schemas/Token'
          description: Unique value associated with a specific version of a specific
            Entity.  Token value may not be reused for any other Entity versions;
            it must change each time the Entity changes.
    RIDOperationalStatus:
      description: Indicates operational status of associated aircraft.
      enum:
      - Undeclared
      - Ground
      - ManualControl
      - ReturningHome
      - AutomatedMission
      - EmergencyLanding
      - ControlLoss
      - AirborneOther
      type: string
    SpeedAccuracy:
      description: |-
        This is the same enumeration scale and values from ADS-B NACv.

        `SAUnknown`: Unknown speed accuracy

        `SA10mpsPlus`: > 10 m/s

        `SA10mps`: < 10 m/s

        `SA3mps`: < 3 m/s

        `SA1mps`: < 1 m/s

        `SA03mps`: < 0.3 m/s
      enum:
      - SAUnknown
      - SA10mpsPlus
      - SA10mps
      - SA3mps
      - SA1mps
      - SA03mps
      type: string
    RIDAircraftPosition:
      description: Position of an aircraft as reported for remote ID purposes.
      required:
      - lat
      - lng
      - alt
      type: object
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lng:
          $ref: '#/components/schemas/Longitude'
        alt:
          format: float
          description: 'Geodetic altitude (NOT altitude above launch, altitude above
            ground, or EGM96): aircraft distance above the WGS84 ellipsoid as measured
            along a line that passes through the aircraft and is normal to the surface
            of the WGS84 ellipsoid.  This value is provided in meters and must have
            a minimum resolution of 1 meter.'
          type: number
          example: 1321.2
        accuracy_h:
          anyOf:
          - $ref: '#/components/schemas/HorizontalAccuracy'
          description: Horizontal error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        accuracy_v:
          anyOf:
          - $ref: '#/components/schemas/VerticalAccuracy'
          description: Vertical error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        extrapolated:
          description: True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.  Assumed false
            if not specified.
          type: boolean
        pressure_altitude:
          format: float
          description: The uncorrected altitude (based on reference standard 29.92
            inHg, 1013.25 mb) provides a reference for algorithms that utilize "altitude
            deltas" between aircraft.  This value is provided in meters and must have
            a minimum resolution of 1 meter.
          type: number
    GeoPolygonString:
      description: |-
        Plain-string representation of a geographic polygon consisting of at least three geographic points describing a closed polygon on the earth.  Each point consists of latitude,longitude in degrees.  Points are also comma-delimited, so this parameter will look like `lat1,lng1,lat2,lng2,lat3,lng3,...`  Latitude values must fall in the range [-90, 90] and longitude values must fall in the range [-180, 180].

        All of the requirements and clarifications for GeoPolygon apply to GeoPolygonString as well.
      pattern: ^(?:-?\d{1,3}(?:\.\d*)?,){5}-?\d{1,3}(?:\.\d*)?(?:(?:,-?\d{1,3}(?:\.\d*)?){2})*$
      type: string
    RIDHeight:
      description: A relative altitude for the purposes of remote ID.
      required:
      - distance
      - reference
      type: object
      properties:
        distance:
          format: float
          description: Distance above reference datum.  This value is provided in
            meters and must have a minimum resolution of 1 meter.
          type: number
        reference:
          description: The reference datum above which the height is reported.
          enum:
          - TakeoffLocation
          - GroundLevel
          type: string
    DARNodeConfiguration:
      description: A CockroachDB node that will participate in the DAR.
      required:
      - hostname
      - port
      type: object
      properties:
        hostname:
          description: Hostname of this node conformant with RFC 1123 section 2.1,
            resolveable to an IP address by all other DAR participants.
          pattern: '^\[[0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{0,4}){2,7}\]|[^\0\t\r\n#%\/:?@[\\\]]{1,63}(?:\.[^\0\t\r\n
            #%\/:?@[\\\]]{1,63}){1,126}$'
          type: string
        port:
          description: Exposed port on node that may be joined by other CockroachDB
            nodes.
          maximum: 65535
          minimum: 1
          type: integer
    GetDARConfigurationResponse:
      description: Response to query for DAR configuration information.
      required:
      - dar_nodes
      - dar_configurations
      type: object
      properties:
        dar_configurations:
          description: |-
            Time-bounded DAR configurations, active and intended, for this organization.  This list may be empty if the provider is not a DAR participant.

            A configuration should not take effect until it has been accessible to all other approved providers at this endpoint for at least [DARConfigNoticePeriod], or all approved providers have agreed to a shorter notice period for the new configuration.
          type: array
          items:
            $ref: '#/components/schemas/DARConfiguration'
    RogueFlight:
      description: Details about a rogue flight inside a Constraint.
      type: object
      properties:
        position_reporting_url:
          $ref: '#/components/schemas/RIDFlightsURL'
        flight_id:
          description: This flight ID may be used to request real-time position updates
            for the rogue aircraft in this Constraint through the specified remote
            ID interface.
          allOf:
          - $ref: '#/components/schemas/RIDFlightID'
    RIDHistoricalAircraftPosition:
      description: ""
      required:
      - time
      - position
      type: object
      properties:
        time:
          format: date-time
          description: Time at which this position applied.  RFC 3339 format, per
            OpenAPI specification.
          type: string
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
    Latitude:
      format: double
      description: Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.123
    Longitude:
      format: double
      description: Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456
    LatLngPoint:
      description: Point on the earth's surface.
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'
    RIDAircraftState:
      description: State of an aircraft for the purposes of remote ID.
      required:
      - timestamp
      - timestamp_accuracy
      - accuracy_h
      - accuracy_v
      - speed
      - vertical_speed
      - track
      - speed_accuracy
      - position
      type: object
      properties:
        timestamp:
          format: date-time
          description: Time at which this state was valid.  This may be the time coming
            from the source, such as a GPS, or the time when the system computes the
            values using an algorithm such as an Extended Kalman Filter (EKF).  Timestamp
            must be expressed with a minimum resolution of 1/10th of a second.  RFC
            3339 format, per OpenAPI specification.
          type: string
        timestamp_accuracy:
          format: float
          description: Declaration of timestamp accuracy in seconds, precise to at
            least 10ths of a second, to determine time of applicability.
          minimum: 0
          exclusiveMinimum: false
          type: number
        operational_status:
          $ref: '#/components/schemas/RIDOperationalStatus'
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
        track:
          format: float
          description: Direction of flight expressed as a "True North-based" ground
            track angle.  This value is provided in degrees East of North with a minimum
            resolution of 1 degree.
          maximum: 360
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: number
        speed:
          format: float
          description: Ground speed of flight in meters per second.  Minimum resolution
            of 0.25 m/s.
          minimum: 0
          exclusiveMinimum: false
          type: number
          example: 1.9
        speed_accuracy:
          anyOf:
          - $ref: '#/components/schemas/SpeedAccuracy'
          description: Accuracy of horizontal ground speed.
        vertical_speed:
          format: float
          description: Speed up (vertically) WGS84-HAE, m/s.
          type: number
          example: 0.2
        height:
          $ref: '#/components/schemas/RIDHeight'
        group_radius:
          format: float
          description: Farthest horizontal distance from reported group location at
            which an aircraft in the group may be located (meters).
          minimum: 0
          exclusiveMinimum: true
          type: number
        group_ceiling:
          format: float
          description: Maximum altitude (meters WGS84-HAE) of Group Operation
          type: number
        group_floor:
          format: float
          description: Minimum altitude (meters WGS84-HAE) of Group Operation.  If
            not specified, ground level shall be assumed.
          type: number
    Altitude:
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5
    RIDFlight:
      description: Description of a remote ID flight.
      required:
      - id
      - aircraft_type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RIDFlightID'
        aircraft_type:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftType'
          description: Generic type of aircraft.
        current_state:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftState'
          description: The most up-to-date state of the aircraft.  Required unless
            `volumes` is specified.
        volumes:
          description: The set of spacetime volumes the aircraft is within.  Required
            if `current_state` is not specified.  The fields `time_start` and `time_end`
            are required if `current_state` is not specified.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        position_history:
          description: |-
            A short history of recent aircraft movement, specified only when `include_history` is true.  If `volumes` is not specified and `include_history` is true, then this field is required.

            Under no circumstances should more than 60 seconds of history be included.  A full 60 seconds of most recent history (excluding current position) is required, or as much history is available if there is less than 60 seconds of history.  This history does not need to include the current position.  The entries in this list should be in descending order according to time.
          type: array
          items:
            $ref: '#/components/schemas/RIDHistoricalAircraftPosition'
        simulated:
          description: If specified as true, this flight is not a physical aircraft;
            it is just a simulation to test the system.
          type: boolean
    GeoPolygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
      - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'
    EntityTypeListString:
      description: String of comma-separated list of EntityTypes.
      pattern: ^(?:PositionReporting|Constraint|AirspaceAwarenessProvider|Operation)(?:,(?:PositionReporting|Constraint|AirspaceAwarenessProvider|Operation)){0,3}$
      type: string
    DARConfiguration:
      description: Configuration of the portion of the DAR hosted by this organization.
      required:
      - time_effective
      - dar_nodes
      - environment
      - ca_certificate_urls
      type: object
      properties:
        time_effective:
          format: date-time
          description: The datetime at which this configuration became effective,
            or will become effective.  RFC 3339 format, per OpenAPI specification.
          type: string
        time_end:
          format: date-time
          description: The datetime at which this configuration will no longer apply.  If
            omitted, this configuration is intended to be active indefinitely.  RFC
            3339 format, per OpenAPI specification.
          type: string
        dar_nodes:
          description: |-
            List of CockroachDB nodes participating in the DAR hosted by this provider.

            This may be a complete list of nodes, a load balancer address, or a subset of nodes acting as "seed nodes".  If a load balancer is not specified, at least three entries are recommended.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/DARNodeConfiguration'
        environment:
          description: Environment to which this configuration applies.  The production
            environment shall have the value `production` and the test environment
            shall have the value `test`, but other values are allowed as well.  All
            CockroachDB nodes in a named environment are expected to interact with
            all other providers' nodes in that environment.
          type: string
          example: production
        ca_certificate_urls:
          description: The URLs at which CA certificates for this provider may be
            obtained.  These certificates will be used to validate node certificates
            signed by the associated key.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/URL'
    SignatureEntry:
      description: Mapping between an EntityUUID and an EntitySignature.
      required:
      - id
      - sig
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
          description: ""
        sig:
          $ref: '#/components/schemas/EntitySignature'
          description: ""
    SignatureDictionary:
      description: Collection of mappings between EntityUUID and EntitySignature.
      type: array
      items:
        $ref: '#/components/schemas/SignatureEntry'
    EntityReference:
      description: Common information tracked by the DSS for all Entity references.
      required:
      - type
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this object.  Created by client, and
            client must respond to a peer request for full information of this Entity
            according to this ID.
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner,
            and only requiring EntitySignatures for unowned Entities.
          type: string
          example: myuss
        version:
          format: int32
          description: Assigned and incremented automatically by the DSS, included
            in EntitySignatures.  When increased, indicates that an Entity has changed
            (allows another client client to optimize full Entity retrieval for only
            those Entities which have changed since client’s cache).
          type: integer
        time_end:
          format: date-time
          description: A planning client does not need to consider this Entity when
            considering time periods that will start after time_end.  RFC 3339 format,
            per OpenAPI specification.
          type: string
        time_start:
          format: date-time
          description: A planning client does not need to consider this Entity when
            considering time periods that will end before start_time.  RFC 3339 format,
            per OpenAPI specification.
          type: string
        type:
          $ref: '#/components/schemas/EntityType'
          description: ""
    OperationReference:
      description: A reference to an Operation.  The DSS reports only these references
        and clients must exchange more information peer-to-peer.
      required:
      - reference
      - details_url
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/EntityReference'
        details_url:
          $ref: '#/components/schemas/OperationURL'
    Operation:
      description: Full specification of a UTM Operation. Note that this data is not
        stored in the DSS; only with the clients.
      required:
      - id
      - volumes
      - signature
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this Operation.  Created by client.
        volumes:
          description: Volumes that wholly contain the Operation while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        rogue_flight:
          oneOf:
          - $ref: '#/components/schemas/RogueFlight'
          description: If this Operation is rogue, this field contains the details
            for tracking that flight.
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: Signature for this version of this Operation.  Includes information
            about the version of this Operation.  Obtained from the DSS upon creation
            or modification of a reference.
    OperationURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: The URL at which the full information of an Operation may be exchanged.  See
        the `/uss/operations/{id}` path for specification of this endpoint.
      type: string
      example: https://example.com/operations/98758ef1-172b-4a8f-827c-971226adf7e1
    ConstraintReference:
      description: A reference to a Constraint.  The DSS reports only these references
        and clients must exchange more information peer-to-peer.
      required:
      - reference
      - details_url
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/EntityReference'
        details_url:
          $ref: '#/components/schemas/ConstraintURL'
    ConstraintURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: The URL at which the full information of a Constraint may be exchanged.  See
        the `/uss/constraints/{id}` path for specification of this endpoint.
      type: string
      example: https://example.com/constraints/7d7f85df-cda9-4edd-b541-d891ad9ad46c
    Constraint:
      description: Full specification of a UTM Constraint.
      required:
      - id
      - volumes
      - signature
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this Constraint.  Created by client.
        volumes:
          description: Volumes that wholly contain the Constraint while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: Signature for this version of this Constraint.  Includes information
            about the version of this Constraint.  Obtained from the DSS upon creation
            or modification of a reference.
    SubscriberToNotify:
      description: Subscriber to notify of a creation/change/deletion of a change
        in the airspace.  This is provided by the DSS to a client changing the airspace,
        and it is the responsibility of the client changing the airspace (they will
        receive a set of these notification requests) to send a notification to each
        specified `url`.
      required:
      - subscriptions
      - url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        url:
          anyOf:
          - $ref: '#/components/schemas/URL'
          description: The endpoint that the client mutating the airspace should provide
            the update to.  API depends on the DSS action taken that triggered this
            notification request.
    IdentificationServiceArea:
      description: An Identification Service Area (area in which remote ID services
        are being provided).  The DSS reports only these declarations and clients
        must exchange flight information peer-to-peer.
      required:
      - extents
      - flights_url
      - owner
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume4D'
          description: The bounding spacetime extents of this Identification Service
            Area.  Start and end times will both be specified.
        flights_url:
          $ref: '#/components/schemas/RIDFlightsURL'
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner,
            and only requiring EntitySignatures for unowned Entities.
          type: string
          example: myuss
    EntityType:
      description: |-
        Type of Entity.  The API of the URL associated with an Entity depends on its EntityType.

        `IdentificationServiceArea`: A spacetime volume in which a remote ID service provider will provide remote ID services.

        `Constraint`: A region of airspacetime that imposes limitations on, or provides special information to, flights within it.

        `Operation`: A single deconflicted UTM operation.
      enum:
      - IdentificationServiceArea
      - Constraint
      - Operation
      type: string
    IdentificationServiceAreaURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: The URL at which notifications regarding Identification Service
        Areas may be delivered.  See the `/uss/identification_service_areas/{id}`
        path for specification of this endpoint.
      type: string
      example: https://example.com/identification_service_areas/a4c6f8c0-ad77-4d93-9cc2-ec8601383f96
    Subscription:
      description: Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
      required:
      - id
      - url
      - notification_index
      - owner
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: Unique identifier for this subscription.
        callbacks:
          $ref: '#/components/schemas/SubscriptionCallbacks'
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
          type: string
          example: myuss
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        expires:
          format: date-time
          description: If set, this subscription will be automatically removed after
            this time.  RFC 3339 format, per OpenAPI specification.
          type: string
        last_used:
          format: date-time
          description: Used to automatically delete stale UTM subscriptions (subscriptions
            not used to create or modify any Key-requiring Entities in the recent
            past).  RFC 3339 format, per OpenAPI specification.
          type: string
        begins:
          format: date-time
          description: If set, this Subscription will not generate any notifications
            before this time.  RFC 3339 format, per OpenAPI specification.
          type: string
    SubscriptionCallbacks:
      description: Endpoints that should be called when an applicable event occurs.  At
        least one field must be specified.
      type: object
      properties:
        identification_service_area_url:
          anyOf:
          - $ref: '#/components/schemas/IdentificationServiceAreaURL'
          description: If specified, other clients will be instructed by the DSS to
            call this endpoint when an Identification Service Area relevant to this
            Subscription is created, modified, or deleted.  Must implement PUT and
            DELETE according to the `/uss/identification_service_areas/{id}` path
            API.
        operation_url:
          anyOf:
          - $ref: '#/components/schemas/OperationURL'
          description: '`[UTM only]` If specified, other clients will be instructed
            by the DSS to call this endpoint when an Operation relevant to this Subscription
            is created, modified, or deleted.  Must implement PUT and DELETE according
            to the `/uss/operations/{id}` path API.'
        constraint_url:
          anyOf:
          - $ref: '#/components/schemas/ConstraintURL'
          description: '`[UTM only]` If specified, other clients will be instructed
            by the DSS to call this endpoint when a Constraint relevant to this Subscription
            is created, modified, or deleted.  Must implement PUT and DELETE according
            to the `/uss/constraints/{id}` path API.'
    RIDIDType:
      description: "Type of identification information provided in `id` field.\n\n\
        `UTM`: UTM-provided unique ID traceable to the registration ID that can act\
        \ like a \"session id\" to protect exposure of operationally sensitive information.\n\
        \n`Registration`: If a CAA provides a method of registering UAS, this number\
        \ is provided by the CAA or its authorized representative. \n\n`Serial`: Can\
        \ be used when no registration ID exists.  This is expressed in the ANSI/CTA-2063\
        \ Physical Serial Number format."
      enum:
      - UTM
      - Registration
      - Serial
      type: string
    RIDFlightDetails:
      description: Details about a flight reported by a remote ID service provider.  At
        least one of the registration or serial fields must be filled if required
        by CAA.
      required:
      - id
      type: object
      properties:
        id:
          description: ID for this flight, matching argument in request.
          type: string
          example: a3423b-213401-0023
        id_type:
          $ref: '#/components/schemas/RIDIDType'
        operator_id:
          description: 'CAA-issued registration/license ID for the remote pilot or
            operator. '
          type: string
        operator_location:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Location of party controlling the aircraft.
        operation_description:
          description: Free-text field that enables the operator to describe the purpose
            of a flight, if so desired.
          type: string
          example: SafeFlightDrone company doing survey with DJI Inspire 2. See my
            privacy policy www.example.com/privacy.
        group_count:
          format: int32
          description: When operating a group (or formation or swarm), number of aircraft
            in group.
          minimum: 1
          exclusiveMinimum: false
          type: integer
        auth_data:
          $ref: '#/components/schemas/RIDAuthData'
  securitySchemes:
    AuthFromAuthorizationAuthority:
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            dss.read.identification_service_areas: Client may query, read, or create
              subscriptions for Identification Service Areas for remote ID.  Does
              not provide access to UTM-related Entities.  A remote ID display provider
              shall be granted this scope upon request.
            dss.write.identification_service_areas: Client may create, edit, and delete
              Identification Service Areas for remote ID.  A remote ID service provider
              shall be granted this scope upon request.
            dss.write.airspace_awareness: '`[UTM only]` In addition to `dss.read.airspace_awareness`,
              client may create airspace awareness Entities.  A VLOS airspace awareness
              provider would likely use this scope.'
            dss.write.operations: '`[UTM only]` Client may create Operation Entities.  A
              strategic planning UTM provider would use this scope, along with dss.read.operations.'
            dss.write.constraints: '`[UTM only]` Client may create un-deconflicted
              constraints in the airspace.  A client acting on behalf of a governmental
              organization would use this scope.'
            dss.read.dar_configuration: Client may read information about the configuration
              of this DAR participant's portion of the DAR.  Any airspace service
              provider shall be granted this scope upon request.
            dss.read.operations: '`[UTM only]` Client may query, read, and subscribe
              to Operation Entities.  A strategic planning UTM provider would use
              this scope, along with dss.write.operations.'
            dss.read.constraints: '`[UTM only]` Client may read, query, or subscribe
              to constraints in the airspace.'
      type: oauth2
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `aud`, with audience requested by client.
        * `exp`, with a time no further than 1 hour in the future.
        * `client_id`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
security:
- AuthFromAuthorizationAuthority:
  - dss.read.position_reporting_entities
  - dss.write.position_reporting_entities
  - dss.read.airspace_awareness
  - dss.write.airspace_awareness
  - dss.write.operations
  - dss.write.constraints
tags:
- name: dss
  description: Endpoints exposed by the DSS server.
- name: p2p_rid
  description: Endpoints exposed by remote ID service providers for peer-peer communication.
- name: p2p_utm
  description: '`[UTM only]` Endpoints exposed by DSS clients for peer-peer communication
    of Entity details, including DSS-triggered subscription notifications.'
- name: config
  description: Communication necessary to coordinate interoperable system configurations.
- name: dss_miniuss
  description: '`[UTM only]` USS-like endpoints hosted by DSS providers.  These endpoints
    would be used by a USS that does not want to host their own Constraint details,
    instead having the DSS act as a mini USS to host those details in addition to
    managing the (separate) EntityReference.'
- name: dss_utm
  description: Endpoints exposed by the DSS server only used for UTM.
