---
openapi: 3.0.2
info:
  title: Discovery and Synchronization Service
  version: 0.0.2
  description: |-
    Interface to Discovery and Synchronization Service and service providers used by participating clients to discover and inform other service providers.

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

    This API contains both remote ID and UTM concepts.  For audiences solely interested in remote ID, ignore:
    * All elements marked `[UTM only]`
    * Everything mentioning Constraint, Operation, AirspaceAwareness, Deconfliction, or Key
paths:
  /dss/identification_service_areas:
    summary: Set of Identification Service Areas in the DSS.
    description: ""
    get:
      tags:
      - dss
      parameters:
      - name: area
        description: The area in which to search for Identification Service Areas.  Some
          Identification Service Areas near this area but wholly outside it may also
          be returned.
        schema:
          $ref: 'base.yaml#/components/schemas/GeoPolygonString'
        in: query
        required: true
      - name: earliest_time
        description: If specified, indicates non-interest in any Identification Service
          Areas that end before this time.  RFC 3339 format, per OpenAPI specification.
        schema:
          format: date-time
          type: string
        in: query
        required: true
      - name: latest_time
        description: If specified, indicates non-interest in any Identification Service
          Areas that start after this time.  RFC 3339 format, per OpenAPI specification.
        schema:
          format: date-time
          type: string
        in: query
        required: true
      - name: min_altitude
        description: If specified, indicates non-interest in Identification Service
          Areas entirely below this altitude in meters above the WGS84 ellipsoid.
        schema:
          type: number
        in: query
      - name: max_altitude
        description: If specified, indicates non-interest in Identification Service
          Areas entirely above this altitude in meters above the WGS84 ellipsoid.
        schema:
          type: number
        in: query
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentificationServiceAreasResponse'
          description: Identification Service Areas were successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        413:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: The requested area was too large.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.identification_service_areas
      summary: /dss/identification_service_areas
      description: Retrieve all Identification Service Areas in the DAR for a given
        area during the given time.  Note that some Identification Service Areas returned
        may lie entirely outside the requested area.
  /dss/identification_service_areas/{id}:
    summary: An Identification Service Area in the DSS.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutIdentificationServiceAreaParameters'
        required: true
      tags:
      - dss
      parameters:
      - name: id
        description: EntityUUID of the Identification Service Area.
        schema:
          $ref: 'base.yaml#/components/schemas/EntityUUID'
        in: path
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutIdentificationServiceAreaResponse'
          description: An existing Identification Service Area was updated successfully
            in the DSS.
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutIdentificationServiceAreaResponse'
          description: A new Identification Service Area was created successfully
            in the DSS.
        400:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Identification Service Area in a disallowed way.
        401:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        409:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: |-
            * An Identification Service Area with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to update the DAR because of other simultaneous changes.
        413:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: The area of the Identification Service Area is too large.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.identification_service_areas
      summary: /dss/identification_service_areas/{id}
      description: |-
        Create or update an Identification Service Area.

        The DSS assumes the USS has already added the appropriate retention period to operation end time in `time_end` field before storing it.  Updating `time_start` is not allowed if it is before the current time.
    delete:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIdentificationServiceAreaResponse'
          description: Identification Service Area was successfully deleted from DSS.
        400:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The Identification Service Area does not belong to the client requesting deletion.
        404:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Entity could not be deleted because it could not be found.
        409:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Despite repeated attempts, the DSS was unable to update the
            DAR because of other simultaneous changes.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.identification_service_areas
      summary: /dss/identification_service_areas/{id}
      description: Delete an Identification Service Area.  USSs should not delete
        Identification Service Areas before the end of the last managed flight plus
        the retention period.
    parameters:
    - name: id
      description: EntityUUID of the Identification Service Area.
      schema:
        $ref: 'base.yaml#/components/schemas/EntityUUID'
      in: path
      required: true
  /dss/subscriptions:
    summary: Subscriptions for airspace updates to a volume of interest.
    get:
      tags:
      - dss
      parameters:
      - name: area
        description: The area in which to search for Subscriptions.  Some Subscriptions
          near this area but wholly outside it may also be returned.
        schema:
          $ref: 'base.yaml#/components/schemas/GeoPolygonString'
        in: query
        required: true
      - name: min_altitude
        description: If specified, indicates non-interest in subscriptions for volumes
          entirely below this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      - name: max_altitude
        description: If specified, indicates non-interest in subscriptions for volumes
          entirely above this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
        400:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        413:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: The requested area was too large.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.identification_service_areas
        - dss.read.operations
        - dss.read.constraints
      summary: /dss/subscriptions
      description: |-
        Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.

        Only Subscriptions belonging to the caller are returned.  This endpoint would be used if a USS lost track of Subscriptions they had created and/or wanted to resolve an error indicating that they had too many existing Subscriptions in an area.
  /dss/subscriptions/{id}:
    summary: Subscription for airspace updates to a volume of interest.
    get:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionsResponse'
          description: Subscription information was retrieved successfully.
        400:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: /dss/subscriptions/{id}
      description: Verify the existence/valdity and state of a particular subscription.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      tags:
      - dss
      parameters:
      - name: id
        description: SubscriptionUUID of the subscription of interest.  Must be created
          by client before `PUT` call to create AreaSubscription in DSS because the
          client may receive a notification at that subscription before receiving
          a response from the DSS.
        schema:
          $ref: 'base.yaml#/components/schemas/SubscriptionUUID'
        in: path
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: An existing Subscription was updated successfully.
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A new Subscription was created successfully.
        400:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        401:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * An EntityType was specified in `types_filter` to which the scopes included in the access token do not provide access.
        409:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: |-
            * A Subscription with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to update the DAR because of other simultaneous changes.
        429:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Client already has too many Subscriptions in the area where
            a new Subscription was requested.  To correct this problem, the client
            may query GET /subscriptions to see which Subscriptions are counting against
            their limit.  This problem should not generally be encountered because
            the Subscription limit should be above what any consumer that reasonably
            aggregates their Subscriptions should request.  But, a Subscription limit
            is necessary to bound performance requirements for DSS instances and would
            likely be hit by, e.g., a large remote ID display provider that created
            a Subscription for each of their display client users' views.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.identification_service_areas
        - dss.read.operations
        - dss.read.constraints
      summary: /dss/subscriptions/{id}
      description: Create or update a subscription.  Subscription notifications are
        only triggered by (and contain full information of) changes to, creation of,
        or deletion of, Entities referenced by or stored in the DSS; they do not involve
        any data transfer (such as remote ID telemetry updates) apart from Entity
        information.
    delete:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
          description: Subscription was deleted successfully.
        400:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The Entity does not belong to the client requesting deletion.
        404:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Subscription could not be deleted because it could not be found.
        409:
          content:
            application/json:
              schema:
                $ref: 'base.yaml#/components/schemas/RIDAircraftType'
          description: Despite repeated attempts, the DSS was unable to update the
            DAR because of other simultaneous changes.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.read.operations
        - dss.read.constraints
      summary: /dss/subscriptions/{id}
      description: Delete a subscription.
    parameters:
    - name: id
      description: SubscriptionUUID of the subscription of interest.
      schema:
        $ref: 'base.yaml#/components/schemas/SubscriptionUUID'
      in: path
      required: true
components:
  schemas:
    GetSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified area.
          type: array
          items:
            $ref: 'base.yaml#/components/schemas/Subscription'
    PutIdentificationServiceAreaResponse:
      description: Response to a request to create or update a reference to an Identification
        Service Area in the DSS.
      required:
      - service_area
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Identification Service Area changes just made.  This client
            must call PUT for each provided URL according to the `/uss/identification_service_areas/{id}`
            path API.
          type: array
          items:
            $ref: 'base.yaml#/components/schemas/SubscriberToNotify'
        service_area:
          anyOf:
          - $ref: 'base.yaml#/components/schemas/IdentificationServiceArea'
          description: Resulting service area stored in DSS.
    GetIdentificationServiceAreasResponse:
      description: Response to DSS query for Identification Service Areas in an area
        of interest.
      required:
      - service_areas
      type: object
      properties:
        service_areas:
          description: Identification Service Areas in the area of interest.
          type: array
          items:
            $ref: 'base.yaml#/components/schemas/IdentificationServiceArea'
    PutIdentificationServiceAreaParameters:
      description: Parameters for a request to create or update a reference to an
        Identification Service Area in the DSS.
      required:
      - extents
      - flights_url
      type: object
      properties:
        extents:
          anyOf:
          - $ref: 'base.yaml#/components/schemas/Volume4D'
          description: |-
            The bounding spacetime extents of this Identification Service Area.  Start and end times must be specified.

            These extents should not reveal any sensitive information about the flight or flights within them.  This means, for instance, that extents should not tightly-wrap a flight path, nor should they generally be centered around the takeoff point of a single flight.
        flights_url:
          $ref: 'base.yaml#/components/schemas/RIDFlightsURL'
    DeleteIdentificationServiceAreaResponse:
      description: Response for a request to delete an Identification Service Area.
      required:
      - service_area
      - subscribers
      type: object
      properties:
        service_area:
          anyOf:
          - $ref: 'base.yaml#/components/schemas/IdentificationServiceArea'
          description: Indentification Service Area that was just deleted.
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Identification Service Area just deleted.  This client must
            call DELETE for each provided URL according to the `/identification_service_areas`
            path API.
          type: array
          items:
            $ref: 'base.yaml#/components/schemas/SubscriberToNotify'
    PutSubscriptionParameters:
      description: Parameters for a request to create or update a subscription in
        the DSS.
      required:
      - extents
      - callbacks
      type: object
      properties:
        extents:
          anyOf:
          - $ref: 'base.yaml#/components/schemas/Volume4D'
          description: |-
            The spacetime extents of the volume to subscribe to.

            This subscription will automatically be deleted after its end time if it has not been refreshed by then.  If end time is not specified when creating a subscription with a UTM scope, this subscription will be automatically deleted if it hasn't been used for a certain amount of time.  If end time is not specified when creating a subscription without a UTM scope (such as for PositionReporting Entities), the value will be automatically set to 24 hours in the future.

            Note that some Entities triggering notifications will lie entirely outside the requested area because an individual DAR cell cannot filter by exact geography.
        callbacks:
          $ref: 'base.yaml#/components/schemas/SubscriptionCallbacks'
    PutSubscriptionResponse:
      description: Response for a request to create or update a subscription.
      required:
      - subscription
      type: object
      properties:
        service_areas:
          description: Identification Service Areas in or near the subscription area
            at the time of creation/update, if `identification_service_area_url` callback
            was specified.
          type: array
          items:
            $ref: 'base.yaml#/components/schemas/IdentificationServiceArea'
        operation_references:
          description: Operation references in or near the subscription area at the
            time of creation/update, if `operation_url` callback was specified.
          type: array
          items:
            $ref: 'base.yaml#/components/schemas/OperationReference'
        constraint_references:
          description: Constraint references in or near the subscription area at the
            time of creation/update, if `constraint_url` callback was specified.
          type: array
          items:
            $ref: 'base.yaml#/components/schemas/ConstraintReference'
        subscription:
          anyOf:
          - $ref: 'base.yaml#/components/schemas/Subscription'
          description: Result of the operation on the subscription.
  securitySchemes:
    AuthFromAuthorizationAuthority:
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            dss.read.identification_service_areas: Client may query, read, or create
              subscriptions for Identification Service Areas for remote ID.  Does
              not provide access to UTM-related Entities.  A remote ID display provider
              shall be granted this scope upon request.
            dss.write.identification_service_areas: Client may create, edit, and delete
              Identification Service Areas for remote ID.  A remote ID service provider
              shall be granted this scope upon request.
            dss.write.airspace_awareness: '`[UTM only]` In addition to `dss.read.airspace_awareness`,
              client may create airspace awareness Entities.  A VLOS airspace awareness
              provider would likely use this scope.'
            dss.write.operations: '`[UTM only]` Client may create Operation Entities.  A
              strategic planning UTM provider would use this scope, along with dss.read.operations.'
            dss.write.constraints: '`[UTM only]` Client may create un-deconflicted
              constraints in the airspace.  A client acting on behalf of a governmental
              organization would use this scope.'
            dss.read.dar_configuration: Client may read information about the configuration
              of this DAR participant's portion of the DAR.  Any airspace service
              provider shall be granted this scope upon request.
            dss.read.operations: '`[UTM only]` Client may query, read, and subscribe
              to Operation Entities.  A strategic planning UTM provider would use
              this scope, along with dss.write.operations.'
            dss.read.constraints: '`[UTM only]` Client may read, query, or subscribe
              to constraints in the airspace.'
      type: oauth2
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `aud`, with audience requested by client.
        * `exp`, with a time no further than 1 hour in the future.
        * `client_id`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
security:
- AuthFromAuthorizationAuthority:
  - dss.read.position_reporting_entities
  - dss.write.position_reporting_entities
  - dss.read.airspace_awareness
  - dss.write.airspace_awareness
  - dss.write.operations
  - dss.write.constraints
tags:
- name: dss
  description: Endpoints exposed by the DSS server.