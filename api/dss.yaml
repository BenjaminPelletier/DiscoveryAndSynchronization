---
openapi: 3.0.2
info:
  title: Discovery and Synchronization Service
  version: 0.0.1
  description: |-
    Interface to Discovery and Synchronization Service and service providers used by participating clients to discover and inform other service providers.

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

    This API contains both remote ID and UTM concepts.  For audiences solely interested in remote ID, ignore:
    * All elements marked `[UTM only]`
    * Everything mentioning Constraint, Operation, AirspaceAwareness, Deconfliction, or Key
paths:
  /entities:
    summary: Set of airspace Entities in the DSS.
    description: ""
    get:
      tags:
      - dss
      parameters:
      - name: area
        description: The area in which to search for Entities.  Some Entities near
          this area but wholly outside it may also be returned.
        schema:
          $ref: '#/components/schemas/GeoPolygonString'
        in: query
        required: true
      - name: earliest_time
        description: If specified, indicates non-interest in any Entities that end
          before this time.
        schema:
          format: date-time
          type: string
        in: query
        required: true
      - name: latest_time
        description: If specified, indicates non-interest in any Entities that start
          after this time.
        schema:
          format: date-time
          type: string
        in: query
        required: true
      - name: min_altitude
        description: If specified, indicates non-interest in Entities entirely below
          this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      - name: max_altitude
        description: If specified, indicates non-interest in Entities entirely above
          this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
        required: true
      - name: types_filter
        description: The types of Entities that should be returned from this query.  If
          not specified, all EntityTypes visible with the provided access token will
          be returned.
        schema:
          $ref: '#/components/schemas/EntityTypeListString'
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEntitiesResponse'
          description: Declarations of Entities were successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * An EntityType was specified in `types_filter` to which the scopes included in the access token do not provide access.
        413:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
        - dss.read.airspace_awareness
      summary: 'DSS: /entities'
      description: |-
        Retrieve references to all visible airspace Entities in the DAR for a given area during the given time.  Note that some Entities returned will lie entirely outside the requested area because an individual DAR cell cannot filter EntitySummaries by exact geography.

        Only PositionReporting Entities shall be visible to clients providing the `dss.read.position_reporting_entities` scope.
  /flights:
    summary: Basic operation details to meet remote ID requirements.
    description: This endpoint may be polled by remote ID display providers to display
      basic aircraft activity near a user in real time.
    get:
      tags:
      - p2p_rid
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightsResponse'
          description: Flight information was successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested view is entirely outside any remote ID service
            provision areas (PositionReporting Entity volumes) this provider has.  A
            display provider receiving this response should discontinue polling for
            this endpoint for the view port requested until otherwise directed by
            DSS interactions.
        413:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested view rectangle was too large.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'RID: /flights'
      description: Retrieve basic flight information to meet remote ID requirements.  This
        endpoint will be polled by remote ID display providers to display basic aircraft
        activity near a user in real time.  All flights that have any recent position
        history (duration defined in standard) inside the requested view must be returned.
    parameters:
    - name: view
      description: 'The area of this view: latmin,lngmin,latmax,lngmax.  Size may
        not exceed a diagonal length specified in the standard.'
      schema:
        pattern: ^-?\d{1,3}(?:\.\d*)?,-?\d{1,3}(?:\.\d*)?,-?\d{1,3}(?:\.\d*)?,-?\d{1,3}(?:\.\d*)?$
        type: string
        example: 29.97816,31.13296,29.98025,31.13535
      in: query
      required: true
    - name: include_history
      description: |-
        If specified as true, include position history.  Otherwise, do not include position history.

        A display provider's first poll of this endpoint for a particular view will usually request position history while follow-up polls for that same view will usually not need to request position history.
      schema:
        type: boolean
      in: query
  /flights/{id}/details:
    summary: A remote ID flight reported by a remote ID service provider.
    get:
      tags:
      - p2p_rid
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightDetailsResponse'
          description: Flight details were successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested flight could not be found.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'RID: /flights/{id}/details'
      description: Retrieve details of a flight to meet remote ID requirements.
    parameters:
    - name: id
      description: Remote ID flight ID for this flight; may be obtained in general
        /flights query.
      schema:
        $ref: '#/components/schemas/RIDFlightID'
      in: path
      required: true
  /dar_transaction:
    summary: Update information DSS airspace representation internal to the DSS constellation.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDARTransactionParameters'
        required: true
      tags:
      - dar
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDARTransactionResponse'
          description: The specified DAR cells were updated successfully.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDARTransactionResponse'
          description: DAR information could not be updated because at least one resource
            had been changed before this transaction could be executed.
      summary: 'DAR: /dar_transaction'
      description: |-
        Update the contents of the DSS airspace representation.

        Note that this pseudo-endpoint will be replaced by specification of the minimum CockroachDB database schema, and then atomic transactions will be made using the CockroachDB client interface.  This pseudo-endpoint serves to illustrate the intended schema before it is formalized; each of the key-value mappings below will become a table in the database schema.

        All updates included in the request must succeed or fail atomically -- no changes shall be made to the DAR unless all updates are successful.

        The assumption for this intercommunication synchronization is that the DAR data schema will consist of the following key-value mappings:
        * DARCellID -> {List of EntityUUID, List of SubscriptionUUID}
        * EntityUUID -> InternalEntitySummary
        * SubscriptionUUID -> InternalSubscription
        * EntityUUID -> InternalConstraint `[UTM only]`
  /configuration:
    summary: Configuration of a DAR participant's portion of the DAR.
    get:
      tags:
      - dar
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDARConfigurationResponse'
          description: Configuration information was successfully retrieved.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.dar_configuration
      summary: 'DAR: /configuration'
      description: |-
        Retrieve all information necessary to interoperate with the portion of the DAR provided by this provider.  This endpoint will nominally only be used when a change is made to the distributed DAR system configuration.

        When a provider is approved by the jurisdictional authority, they will provide a URL to and endpoint with this API that the jurisdictional authority will distribute to all other providers.
  /entities/{id}:
    summary: An Entity reference in the DSS (does not include all Entity details).
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEntityParameters'
        required: true
      tags:
      - dss
      parameters:
      - name: id
        description: EntityUUID of the Entity.  If creating (declaring for the first
          time) an Entity that follows the details workflow (this is optional for
          PositionReporting Entities), the client must be ready to respond to requests
          for details about it as soon as the PUT request is issued (before a response
          is received from the DSS).
        schema:
          $ref: '#/components/schemas/EntityUUID'
        in: path
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityResponse'
          description: An existing Entity reference was updated successfully in the
            DSS.
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityResponse'
          description: A new Entity reference was created successfully in the DSS.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Entity in a disallowed way (e.g., changing the Entity type).
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * An Entity with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to update the DAR because of other simultaneous changes.
        413:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Entity is too large.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /entities/{id}'
      description: |-
        Create or update reference to an Entity.  Unless otherwise specified, the EntityType of an existing Entity may not be changed.

        The `details_url` field in the request body is required for all Entities except PositionReporting Entities.

        `PositionReporting Entities`:
        Authorization scope `dss.write.position_reporting_entities` is required.  The DSS assumes the USS has already added the appropriate retention period to operation end time in EntitySummary's `time_end` extents field before storing it.  Updating `time_start` is not allowed if it is before the current time.

        `Operation Entities`:
        Authorization scope `dss.write.operation_entities` is required.
    delete:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEntityResponse'
          description: Reference to Entity was successfully deleted from DSS.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The Entity does not belong to the client requesting deletion.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Entity could not be deleted because it could not be found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Despite repeated attempts, the DSS was unable to update the
            DAR because of other simultaneous changes.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /entities/{id}'
      description: Delete reference to an Entity.  USSs should not delete PositionReporting
        Entities before the end of the last managed flight plus the retention period.
    parameters:
    - name: id
      description: EntityUUID of the Entity.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true
  /subscriptions:
    summary: Subscriptions for airspace updates to a volume of interest.  Only Subscriptions
      belonging to the caller are returned.
    get:
      tags:
      - dss
      parameters:
      - name: area
        description: The area in which to search for Subscriptions.  Some Subscriptions
          near this area but wholly outside it may also be returned.
        schema:
          $ref: '#/components/schemas/GeoPolygonString'
        in: query
        required: true
      - name: min_altitude
        description: If specified, indicates non-interest in subscriptions for volumes
          entirely below this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      - name: max_altitude
        description: If specified, indicates non-interest in subscriptions for volumes
          entirely above this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        413:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /subscriptions'
      description: Retrieve subscriptions intersecting an area of interest.  Subscription
        notifications are only triggered by (and contain details of) changes to Entities
        in the DSS; they do not involve any other data transfer such as remote ID
        telemetry updates.
  /entity_details/{id}:
    summary: Details of a UTM Entity.
    get:
      tags:
      - p2p_entities
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityDetails'
          description: The Entity details were retrieved successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'Entities: /entity_details/{id}'
      description: |-
        Retrieve the details of an Entity owned by the client.  Note that this request should be denied if the authorization scope does not provide access to the type of Entity being requested.

        Implementation of this endpoint is not required for remote ID service providers (nor remote ID display providers since they do not create Entities).
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEntityDetailsParameters'
        required: true
      tags:
      - p2p_entities
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityDetailsResponse'
          description: Details of previously-known Entity were updated successfully.
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityDetailsResponse'
          description: Details of new (previously-unknown) Entity were received successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'Entities: /entity_details/{id}'
      description: Publish new information about an Entity to the host of this endpoint
        (usually because of instructions from the DSS triggered by a subscription).
    delete:
      tags:
      - p2p_entities
      responses:
        204:
          description: Notification of Entity deletion was received successfully,
            even if the host USS was previously unaware of the specified Entity.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'Entities: /entity_details/{id}'
      description: Publish a notification about the deletion of an Entity to this
        client (usually because of instructions from the DSS triggered by a subscription).
    parameters:
    - name: id
      description: EntityUUID of the Entity details.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true
  /subscriptions/{id}:
    summary: Subscription for airspace updates to a volume of interest.
    get:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Subscription information was retrieved successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /subscriptions/{id}'
      description: Verify the existence/valdity and state of a particular subscription.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      tags:
      - dss
      parameters:
      - name: id
        description: SubscriptionUUID of the subscription of interest.  Must be created
          by client before `PUT` call to create AreaSubscription in DSS because the
          client may receive a notification at that subscription before receiving
          a response from the DSS.
        schema:
          $ref: '#/components/schemas/SubscriptionUUID'
        in: path
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: An existing Subscription was updated successfully.
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A new Subscription was created successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * An EntityType was specified in `types_filter` to which the scopes included in the access token do not provide access.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID already exists and is owned by a different client.
            * Despite repeated attempts, the DSS was unable to update the DAR because of other simultaneous changes.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
        - dss.write.airspace_awareness
      summary: 'DSS: /subscriptions/{id}'
      description: |-
        Create or update a subscription.  Subscription notifications are only triggered by (and contain details of) changes to Entities in the DSS; they do not involve any other data transfer such as remote ID telemetry updates.

        Note that the types of content that should be sent to the created subscription depends on the scope in the provided access token.
    delete:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
          description: Subscription was deleted successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The Entity does not belong to the client requesting deletion.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Subscription could not be deleted because it could not be found.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Despite repeated attempts, the DSS was unable to update the
            DAR because of other simultaneous changes.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /subscriptions/{id}'
      description: Delete a subscription.
    parameters:
    - name: id
      description: SubscriptionUUID of the subscription of interest.
      schema:
        $ref: '#/components/schemas/SubscriptionUUID'
      in: path
      required: true
  /flights/{id}:
    summary: Basic operation details to meet remote ID requirements.
    description: ""
    get:
      tags:
      - p2p_rid
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightsResponse'
          description: Flight information was successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested flight could not be found.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'RID: /flights/{id}'
      description: '`[UTM only]` This endpoint may be polled to maintain situational
        awareness of an aircraft engaging in a UTM Operation, especially during off-nominal
        events.'
    parameters:
    - name: id
      description: Remote ID flight ID for this flight; may be obtained in general
        /flights query.
      schema:
        $ref: '#/components/schemas/RIDFlightID'
      in: path
      required: true
    - name: include_history
      description: |-
        If specified as true, include position history.  Otherwise, do not include position history.

        A display provider's first poll of this endpoint for a particular view will usually request position history while follow-up polls for that same view will usually not need to request position history.
      schema:
        type: boolean
      in: query
  /constraint_details/{id}:
    summary: Public Constraint Entities stored in the DSS.
    get:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityDetails'
          description: The Constraint details were retrieved successfully.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /constraint_details/{id}'
      description: '`[UTM only]` Retrieve the details of a public Constraint Entity
        stored in the DAR and exposed by DSS instances.  This path''s GET API is compatible
        with a GET for an EntityDetailsURLs.'
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEntityParameters'
        required: true
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityResponse'
          description: Existing Constraint was successfully updated, and its details
            will be served from the DSS.
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityResponse'
          description: New Constraint was successfully added to the airspace.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.constraints
      summary: 'DSS: /constraint_details/{id}'
      description: '`[UTM only]` Publish a new public Constraint that will be stored
        in the DAR and exposed by DSS instances (details do not need to be hosted
        by the requesting client).'
    delete:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEntityResponse'
          description: Constraint was successfully deleted from DSS.
      security:
      - AuthFromAuthorizationAuthority:
        - dss.write.constraints
      summary: 'DSS: /constraint_details/{id}'
      description: '`[UTM only]` Delete a public Constraint stored in the DAR and
        served from the DSS.'
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        type: string
      in: path
      required: true
components:
  schemas:
    DeconflictionKey:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current DeconflictionKey-constructed from information obtained with a previous read operation and subsequent requests for details, and optionally, subscription updates—for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: object
      properties:
        signatures:
          anyOf:
          - $ref: '#/components/schemas/SignatureDictionary'
          description: For each of a subset of Entities declared by the DSS in the
            area of interest, the signature of the current version of the full details
            of that Entity.  This EntitySignature is provided by the client who defined
            the Entity, accompanying the full Entity definition data when that data
            is received.
        hashes:
          anyOf:
          - $ref: '#/components/schemas/DeconflictionKeyHash'
          description: Optional (optimization).  May be provided for a set of Entities
            so that each of the included EntitySignatures does not need to be included
            in the `signatures` property.
        subscription:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: If the client obtained the information in this DeconflictionKey
            via a subscription, this field is set to the ID of that subscription so
            the usage of subscriptions can be tracked and unused subscriptions can
            be removed.
    DeconflictionKeyHash:
      description: A shortcut (optimization) data structure that may be provided instead
        of a large set of individually-listed EntitySignatures.
      required:
      - entity_ids
      - entity_signatures
      type: object
      properties:
        entity_ids:
          anyOf:
          - $ref: '#/components/schemas/Hash'
          description: Hash of an ordered list of other clients’ EntityUUIDs in the
            airspace (obtained from DSS via GET ~/entities) excluding the EntityUUIDs
            explicitly specified in DeconflictionKey's `signatures` property.
        entity_signatures:
          anyOf:
          - $ref: '#/components/schemas/Hash'
          description: Hash of an ordered list of EntitySignatures that correspond
            with the list of EntityUUIDs used to generate the `entity_ids` property
            value.
    Volume3D:
      description: A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
      - footprint
      type: object
      properties:
        footprint:
          anyOf:
          - $ref: '#/components/schemas/GeoPolygon'
          description: Projection of this volume onto the earth's surface.
        altitude_lo:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Minimum bounding altitude of this volume.
        altitude_hi:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Maximum bounding altitude of this volume.
    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - spatial_volume
      type: object
      properties:
        spatial_volume:
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
          description: Constant spatial extent of this volume.
        time_start:
          format: date-time
          description: Beginning time of this volume.
          type: string
        time_end:
          format: date-time
          description: End time of this volume.
          type: string
    SubscriberToNotify:
      description: Subscriber to notify of a change/mutation in the airspace.  This
        is provided by the DSS to a client changing the airspace, and it is the responsibility
        of the client changing the airspace (they will receive a set of SubscriberToNotifies)
        to send an AreaChangeNotification to each specified `callback`.
      required:
      - subscriptions
      - url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        url:
          anyOf:
          - $ref: '#/components/schemas/EntityDetailsURL'
          description: The endpoint that the client mutating the airspace should provide
            the updated Entity to.
    GetEntitiesResponse:
      description: Response to DSS query for summaries of Entities in an area of interest.
      required:
      - entities
      type: object
      properties:
        entities:
          description: Declarations/summaries of Entities in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/EntitySummary'
    GetSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
    GetFlightsResponse:
      description: Response to remote ID provider query for flight information in
        an area of interest.
      required:
      - timestamp
      - flights
      type: object
      properties:
        timestamp:
          format: date-time
          description: The remote ID service provider's timestamp for when this information
            was current.
          type: string
        flights:
          description: A list of all flights that have been within the requested area
            within the remote ID retention period.  This includes flights that are
            not currently within the requested area, but were within the requested
            area within the remote ID retention period.
          type: array
          items:
            $ref: '#/components/schemas/RIDFlight'
    InternalConstraint:
      description: Data stored in the DAR for a Constraint whose details are stored
        in the DAR and provided by the DSS.
      required:
      - constraint
      - signature
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/EntityDetails'
        signature:
          $ref: '#/components/schemas/EntitySignature'
    AuthorizationScope:
      description: The scope included in an access token used to access one of the
        endpoints in this API.
      enum:
      - dss.read.position_reporting_entities
      - dss.write.position_reporting_entities
      - dss.read.airspace_awareness
      - dss.write.airspace_awareness
      - dss.write.operation
      type: string
    URL:
      description: Valid http or https URL.
      pattern: '^https?:\/\/(?:\[[0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{0,4}){2,7}\]|[^\0\t\r\n
        #%\/:?@[\\\]]{1,63}(?:\.[^\0\t\r\n #%\/:?@[\\\]]{1,63}){1,126})(?::\d{1,5})?\/?'
      type: string
    Hash:
      description: Base64 representation of a SHA256 hash of the given inner content.  If
        this Hash is for multiple entries, the entries should be concatenated together
        with delimiting commas (but no spaces) before performing the hash.  For instance,
        the Hash of the three UUIDs 4704a043-8212-4256-9dec-7ef5a79218e2, b1220203-fc2a-422d-9604-12464a9b45e0,
        and cca95e90-3163-47d8-bb0e-a7c5c88f078f would be d8NoNy0cPAd7D3b8Qb0DSzcrBVJElwBfmqVcytIoWsk=
        in base64 which is 77c368372d1c3c077b0f76fc41bd034b372b05524497005f9aa55ccad2285ac9
        in hexadecimal.
      maxLength: 44
      minLength: 44
      pattern: ^[0-9a-zA-Z+\/]{43}=$
      type: string
      example: d8NoNy0cPAd7D3b8Qb0DSzcrBVJElwBfmqVcytIoWsk=
    PutSubscriptionResponse:
      description: Response for a request to create or update a subscription.
      required:
      - subscription
      - entities
      type: object
      properties:
        entities:
          description: Declarations/summaries of Entities in the subscription area
            at the time of creation/update.
          type: array
          items:
            $ref: '#/components/schemas/EntitySummary'
        subscription:
          anyOf:
          - $ref: '#/components/schemas/Subscription'
          description: Result of the operation on the subscription.
    RIDFlightsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which the remote ID flights and their details may be retrieved.  See `/flights`, `/flights/{id}`, and `/flights/{id}/details` paths for specification of this endpoint.
        This URL is the base flights resource.  If this URL is specified as https://example.com/flights then the flight information for a particular {id} may be obtained at the URL https://example.com/flights/{id}.  This URL may not have a trailing / character.
      pattern: '[^\/]$'
      type: string
      example: https://example.com/flights
    SignatureDictionary:
      description: Collection of mappings between EntityUUID and EntitySignature.  Keys
        are string representations of `EntityUUIDs`.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EntitySignature'
    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer
    SubscriptionState:
      description: State of AreaSubscription which is causing a notification to be
        sent.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
    UUIDv4:
      description: UUID v4.
      maxLength: 36
      minLength: 36
      pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
      type: string
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
    EntityUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for an Entity communicated through
        the DSS.  Formatted as UUIDv4.
    SubscriptionUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for a Subscription communicated through
        the DSS.  Formatted as UUIDv4.
    Token:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier associated with a specific set of
        data.
    DARCellID:
      description: Descriptor for a particular cell in the DAR.  64-bit hexadecimal-string
        S2 cell ID; see https://s2geometry.io
      maxLength: 16
      minLength: 1
      pattern: ^[0-9a-fA-F]{1,16}$
      type: string
      example: 80cac31c
    RIDFlightID:
      description: ID, unique to a remote ID service provider, which identifies a
        particular flight for which the remote ID service provider is providing remote
        ID services.
      maxLength: 255
      minLength: 1
      pattern: ^[^\0\t\r\n#%\/:?@[\\\]]+$
      type: string
      example: uss1.JA6kHYCcByQ-6AfU
    DSSEntityDetails:
      description: |-
        Entity data fields stored in the DSS specific to particular Entity Types.

        For `PositionReporting` Entities, `flights_url` is required.
      type: object
      properties:
        flights_url:
          anyOf:
          - $ref: '#/components/schemas/RIDFlightsURL'
          description: For PositionReporting Entities, this field contains the `/flights`
            URL at which the `ridclient` endpoints may be found.
    PutPositionReportingDetails:
      description: Additional parameters for a request to create or update a reference
        to a PositionReporting Entity in the DSS.
      required:
      - flights_url
      type: object
      properties:
        flights_url:
          $ref: '#/components/schemas/RIDFlightsURL'
    EntityDetailsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which details about an Entity may be exchanged.  See the `/entity_details` path for specification of this endpoint.
        This URL is the base entity_details resource.  If this URL is specified as https://example.com/entity_details then the Entity details for a particular {id} may be exchanged at the URL https://example.com/entity_details/{id}.  This URL may not have a trailing / character.
      pattern: '[^\/]$'
      type: string
      example: https://example.com/entity_details
    AirspaceAwarenessProviderDetails:
      description: Entity details specific to an airspace awareness provider.
      type: object
    PutAirspaceAwarenessProviderDetails:
      description: Additional parameters for a request to create or update a reference
        to an AirspaceAwarenessProvider Entity in the DSS.
      type: object
    PutConstraintParameters:
      description: Additional parameters for a request to create or update a reference
        to a Constraint Entity in the DSS.
      type: object
    PositionReportingDetails:
      description: Entity details specific to a PositionReporting Entity.
      required:
      - flights_url
      type: object
      properties:
        flights_url:
          $ref: '#/components/schemas/RIDFlightsURL'
    RIDAircraftType:
      description: |-
        Type of aircraft for the purposes of remote ID.

        'LTA' means 'Lighter Than Air'.  `LTAUnpowered` is a balloon.  `VTOL` is a fixed wing aircraft that can take off vertically.
      enum:
      - NotDeclared
      - FixedWingPowered
      - Rotorcraft
      - Multirotor
      - LTAPowered
      - LTAUnpowered
      - VTOL
      - FreeFall
      - Parachute
      - Rocket
      - Glider
      - Tethered
      - GroundObstacle
      - Other
      type: string
    RIDAuthData:
      description: Additional authentication data.
      required:
      - format
      - data
      type: object
      properties:
        format:
          description: Format of additional authentication data.
          type: string
        data:
          description: Authentication data in form specified by `format`.
          type: string
    GetFlightDetailsResponse:
      description: Response to remote ID provider query for details about a specific
        flight.
      required:
      - details
      type: object
      properties:
        details:
          $ref: '#/components/schemas/RIDFlightDetails'
    HorizontalAccuracy:
      description: |-
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAs.

        `HAUnknown`: Unknown horizontal accuracy

        `HA10NMPlus`: > 10NM (18.52km)

        `HA10NM`: < 10NM (18.52km)

        `HA4NM`: < 4NM (7.408km)

        `HA2NM`: < 2NM (3.704km)

        `HA1NM`: < 1NM (1852m)

        `HA05NM`: < 0.5NM (926m)

        `HA03NM`: < 0.3NM (555.6m)

        `HA01NM`: < 0.1NM (185.2m)

        `HA005NM`: < 0.05NM (92.6m)

        `HA30m`: < 30m

        `HA10m`: < 10m

        `HA3m`: < 3m

        `HA1m`: < 1m
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m
      type: string
    VerticalAccuracy:
      description: |-
        This is the GVA enumeration from ADS-B, plus some finer values for UAs.

        `VAUnknown`: Unknown vertical accuracy

        `VA150mPlus`: > 150m

        `VA150m`: < 150m

        `VA45m`: < 45m

        `VA25m`: < 25m

        `VA10m`: < 10m

        `VA3m`: < 3m

        `VA1m`: < 1m
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m
      type: string
    ErrorResponse:
      description: Data provided when an off-nominal condition was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
    PostDARTransactionParameters:
      description: Parameters for a request to update information in the DSS airspace
        representation.
      type: object
      properties:
        cell_updates:
          description: A set of updates to DAR cells to apply in this transaction.
          type: array
          items:
            $ref: '#/components/schemas/DARCellUpdate'
        entity_updates:
          description: A set of updates to Entities in the DAR to apply in this transaction.
          type: array
          items:
            $ref: '#/components/schemas/DAREntityUpdate'
        subscription_updates:
          description: A set of updates to Subscriptions in the DAR to apply in this
            transaction.
          type: array
          items:
            $ref: '#/components/schemas/DARSubscriptionUpdate'
        constraint_updates:
          description: A set of updates to Constraint details in the DAR to apply
            in this transaction.
          type: array
          items:
            $ref: '#/components/schemas/DARConstraintUpdate'
    PostDARTransactionResponse:
      description: Response to a request to update information in the DAR.
      type: object
      properties:
        conflicted_cells:
          description: If any cells had been updated since the information used to
            form the transaction request, those out-of-date cells will be listed here
            in the case of a 409 Conflict response.
          type: array
          items:
            $ref: '#/components/schemas/DARCellID'
        conflicted_entities:
          description: If any Entities had been updated since the information used
            to form the transaction request, those out-of-date Entities will be listed
            here in the case of a 409 Conflict response.
          type: array
          items:
            $ref: '#/components/schemas/EntityUUID'
        conflicted_subscriptions:
          description: If any Subscriptions had been updated since the information
            used to form the transaction request, those out-of-date Subscriptions
            will be listed here in the case of a 409 Conflict response.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionUUID'
        conflicted_constraints:
          description: If any Constraint details had been updated since the information
            used to form the transaction request, those out-of-date Constraint details
            will be listed here in the case of a 409 Conflict response.
          type: array
          items:
            $ref: '#/components/schemas/EntityUUID'
    InternalDARCell:
      description: The information about a DAR cell that the DSS stores internally
        and synchronizes between different DSS instances.
      type: object
      properties:
        subscriptions:
          description: List of Subscriptions applicable to this cell.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionUUID'
        entities:
          description: List of Entities applicable to this cell.
          type: array
          items:
            $ref: '#/components/schemas/EntityUUID'
    EntitySignature:
      title: EntitySignature
      description: A token associated with a particular UTM Entity+version created
        by the client who created the associated Entity.  The EntitySignature is provided
        to the DSS to store privately and then compared against entries in a Key provided
        to mutate the airspace.  The EntitySignature is also provided by the client
        whenever that client transmits the details of the Entity (either via GET,
        or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version must increase each time an Entity is modified.  If
            a client ever receives a subscription update with an EntitySignature for
            a particular EntityUUID that is smaller than the cached EntitySignature
            for that EntityUUID, that subscription update should be ignored.  If the
            DSS ever receives a request to mutate an EntitySummary with an EntitySignature
            containing a version that is not greater than the current DSS contents,
            the request will be rejected.
          type: integer
        token:
          anyOf:
          - $ref: '#/components/schemas/Token'
          description: Unique value associated with a specific version of a specific
            Entity.
    PutEntityParameters:
      description: Parameters for a request to create or update a reference to an
        Entity in the DSS.
      required:
      - extents
      - type
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume4D'
          description: The bounding spacetime extents of this Entity.  Start and end
            times must be specified.  Spatial information is translated into DAR cells
            internally by the DSS then discarded.
        type:
          $ref: '#/components/schemas/EntityType'
        details_url:
          anyOf:
          - $ref: '#/components/schemas/EntityDetailsURL'
          description: The URL at which details about an Entity may be exchanged.  See
            the `/entity_details` path for specification of this endpoint.  This field
            is required when `type` is not `PositionReporting`.
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: |-
            Signature for this version of this Entity.  May be used to verify that peer clients have retrieved the details of this Entity before being allowed to place deconflicted Entities into the airspace.
            This field is required when `type` is not `PositionReporting`.
        position_reporting:
          anyOf:
          - $ref: '#/components/schemas/PutPositionReportingDetails'
          description: This field is required when `type` is `PositionReporting`.
        operation:
          anyOf:
          - $ref: '#/components/schemas/PutOperationParameters'
          description: This field is required when `type` is `Operation`.
        constraint:
          anyOf:
          - $ref: '#/components/schemas/PutConstraintParameters'
          description: This field is required when `type` is `Constraint`.
        awareness_provider:
          anyOf:
          - $ref: '#/components/schemas/PutAirspaceAwarenessProviderDetails'
          description: This field is required when `type` is `AirspaceAwarenessProvider`.
    PutEntityResponse:
      description: Response to a request to create or update a reference to an Entity
        in the DSS.
      required:
      - entity_summary
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Entity changes just made.  This client must call PUT for
            each provided URL according to the `/entity_details` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        entity_summary:
          anyOf:
          - $ref: '#/components/schemas/EntitySummary'
          description: Resulting summary stored in DSS.
    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          anyOf:
          - $ref: '#/components/schemas/Subscription'
          description: The Subscription which was deleted.
    DeleteEntityResponse:
      description: Response for a request to delete an Entity.
      required:
      - entity
      - subscribers
      type: object
      properties:
        entity:
          anyOf:
          - $ref: '#/components/schemas/EntitySummary'
          description: DSS reference to Entity that was just deleted.
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Entity just deleted.  This client must call DELETE for each
            provided URL according to the `/entity_details` path API.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
    RIDOperationalStatus:
      description: Indicates operational status of associated aircraft.
      enum:
      - Undeclared
      - Ground
      - ManualControl
      - ReturningHome
      - AutomatedMission
      - EmergencyLanding
      - ControlLoss
      - AirborneOther
      type: string
    PutOperationParameters:
      description: Additional parameters for a request to create or update a reference
        to an Operation Entity in the DSS.
      type: object
      properties:
        key:
          anyOf:
          - $ref: '#/components/schemas/DeconflictionKey'
          description: Proof that the client is aware of (and has deconflicted with)
            all relevant Entities.  Required unless Operation is declared rogue.
    EntitySummary:
      description: |-
        A declaration of an Entity.  The DSS reports only these EntitySummaries and clients must obtain full details peer-to-peer from the creator/owner.

        `details_url` is required for all Entity types except `PositionReporting`.
      required:
      - id
      - owner
      - type
      - version
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this object.  Created by client, and
            client must respond to a peer request for details about this Entity according
            to this ID.
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner,
            and only requiring EntitySignatures for unowned Entities.
          type: string
          example: myuss
        type:
          $ref: '#/components/schemas/EntityType'
        version:
          format: int32
          description: Extracted from the EntitySignature if specified, or assigned
            and incremented automatically otherwise.  When increased, indicates that
            an Entity has changed (allows another client client to optimize full Entity
            retrieval for only those Entities which have changed since client’s cache).
          type: integer
        time_end:
          format: date-time
          description: A planning client does not need to consider this Entity when
            considering time periods that will start after time_end.
          type: string
        time_start:
          format: date-time
          description: A planning client does not need to consider this Entity when
            considering time periods that will end before start_time.
          type: string
        details_url:
          $ref: '#/components/schemas/EntityDetailsURL'
        details:
          $ref: '#/components/schemas/DSSEntityDetails'
    SpeedAccuracy:
      description: |-
        This is the same enumeration scale and values from ADS-B NACv.

        `SAUnknown`: Unknown speed accuracy

        `SA10mpsPlus`: > 10 m/s

        `SA10mps`: < 10 m/s

        `SA3mps`: < 3 m/s

        `SA1mps`: < 1 m/s

        `SA03mps`: < 0.3 m/s
      enum:
      - SAUnknown
      - SA10mpsPlus
      - SA10mps
      - SA3mps
      - SA1mps
      - SA03mps
      type: string
    RIDAircraftPosition:
      description: Position of an aircraft as reported for remote ID purposes.
      required:
      - lat
      - lng
      - alt
      type: object
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lng:
          $ref: '#/components/schemas/Longitude'
        alt:
          format: float
          description: 'Geodetic altitude (NOT altitude above launch, altitude above
            ground, or EGM96): aircraft distance above the WGS84 ellipsoid as measured
            along a line that passes through the aircraft and is normal to the surface
            of the WGS84 ellipsoid.  This value is provided in meters and must have
            a minimum resolution of 1 meter.'
          type: number
          example: 1321.2
        accuracy_h:
          anyOf:
          - $ref: '#/components/schemas/HorizontalAccuracy'
          description: Horizontal error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        accuracy_v:
          anyOf:
          - $ref: '#/components/schemas/VerticalAccuracy'
          description: Vertical error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        extrapolated:
          description: True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.  Assumed false
            if not specified.
          type: boolean
        pressure_altitude:
          format: float
          description: The uncorrected altitude (based on reference standard 29.92
            inHg, 1013.25 mb) provides a reference for algorithms that utilize "altitude
            deltas" between aircraft.  This value is provided in meters and must have
            a minimum resolution of 1 meter.
          type: number
    GeoPolygonString:
      description: |-
        Plain-string representation of a geographic polygon consisting of at least three geographic points describing a closed polygon on the earth.  Each point consists of latitude,longitude in degrees.  Points are also comma-delimited, so this parameter will look like `lat1,lng1,lat2,lng2,lat3,lng3,...`  Latitude values must fall in the range [-90, 90] and longitude values must fall in the range [-180, 180].

        All of the requirements and clarifications for GeoPolygon apply to GeoPolygonString as well.
      pattern: ^(?:-?\d{1,3}(?:\.\d*)?,){5}-?\d{1,3}(?:\.\d*)?(?:(?:,-?\d{1,3}(?:\.\d*)?){2})*$
      type: string
    RIDHeight:
      description: A relative altitude for the purposes of remote ID.
      required:
      - distance
      - reference
      type: object
      properties:
        distance:
          format: float
          description: Distance above reference datum.  This value is provided in
            meters and must have a minimum resolution of 1 meter.
          type: number
        reference:
          description: The reference datum above which the height is reported.
          enum:
          - TakeoffLocation
          - GroundLevel
          type: string
    DARNodeConfiguration:
      description: A CockroachDB node that will participate in the DAR.
      required:
      - hostname
      - port
      type: object
      properties:
        hostname:
          description: Hostname of this node conformant with RFC 1123 section 2.1,
            resolveable to an IP address by all other DAR participants.
          pattern: '^\[[0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{0,4}){2,7}\]|[^\0\t\r\n#%\/:?@[\\\]]{1,63}(?:\.[^\0\t\r\n
            #%\/:?@[\\\]]{1,63}){1,126}$'
          type: string
        port:
          description: Exposed port on node that may be joined by other CockroachDB
            nodes.
          maximum: 65535
          minimum: 1
          type: integer
    GetDARConfigurationResponse:
      description: Response to query for DAR configuration information.
      required:
      - dar_nodes
      - dar_configurations
      type: object
      properties:
        dar_configurations:
          description: |-
            Time-bounded DAR configurations, active and intended, for this organization.  This list may be empty if the provider is not providing a DSS.

            A configuration should not take effect until it has been accessible to all other approved providers at this endpoint for at least 36 hours, or all approved providers have agreed to a shorter notice period for the new configuration.
          type: array
          items:
            $ref: '#/components/schemas/DARConfiguration'
    RIDFlightDetails:
      description: Details about a flight reported by a remote ID service provider.  At
        least one of the registration or serial fields must be filled if required
        by CAA.
      required:
      - id
      type: object
      properties:
        id:
          description: ID for this flight, matching argument in request.
          type: string
          example: a3423b-213401-0023
        registration:
          description: Country/State registration number of the aircraft.
          type: string
          example: FA12345897
        serial:
          description: Serial number of the aircraft.
          type: string
          example: INTCJ123-4567-890
        operator_id:
          description: 'CAA-issued registration/license ID for the remote pilot or
            operator. '
          type: string
        operator_location:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Location of party controlling the aircraft.
        operation_description:
          description: Free-text field that enables the operator to describe the purpose
            of a flight, if so desired.
          type: string
          example: SafeFlightDrone company doing survey with DJI Inspire 2. See my
            privacy policy www.example.com/privacy.
        takeoff_location:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Location of the takeoff point for this flight.
        group_count:
          format: int32
          description: When operating a group (or formation or swarm), number of aircraft
            in group.
          minimum: 1
          exclusiveMinimum: false
          type: integer
        auth_data:
          $ref: '#/components/schemas/RIDAuthData'
    DARCellUpdate:
      description: Updated data stored internally in DAR cells within the DSS.  Must
        be exchanged in a standardized format between DSS instances to maintain a
        DSS airspace representation.
      required:
      - id
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/DARCellID'
          description: The DAR cell containing this information.
        previous_version:
          description: The previous version of the contents of this cell.  An update
            will only be successful if the cell contents have not changed since the
            request was formed.  Omit this field if the cell did not previously exist
            in the DAR.
          type: integer
        cell:
          anyOf:
          - $ref: '#/components/schemas/InternalDARCell'
          description: New full representation of cell.  If omitted, the cell will
            be deleted from the DAR.
    DARConstraintUpdate:
      description: |-
        `[UTM only]` Updated data for the full details of a Constraint Entity stored internally in the DAR within the DSS.  Must be exchanged in a standardized format between DSS instances to maintain a DSS airspace representation.
        Note that a corresponding DAREntityUpdate should accompany this DARConstraintUpdate in a DAR transaction as this update merely updates the details and not its EntitySummary.
      required:
      - id
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: The Constraint Entity being created, updated, or deleted.
        previous_version:
          description: The previous version of this Constraint within the DAR.  An
            update will only be successful if the Constraint has not changed since
            the request was formed.  Omit this field if the Constraint did not previously
            exist in the DAR.
          type: integer
        constraint:
          anyOf:
          - $ref: '#/components/schemas/InternalConstraint'
          description: New full representation of Constraint.  If omitted, the Entity
            will be deleted from the DAR.
    DAREntityUpdate:
      description: Updated data for an Entity stored internally in the DAR within
        the DSS.  Must be exchanged in a standardized format between DSS instances
        to maintain a DSS airspace representation.
      required:
      - id
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: The Entity being created, updated, or deleted.
        previous_version:
          description: The previous version of this Entity within the DAR.  An update
            will only be successful if the Entity has not changed since the request
            was formed.  Omit this field if the Entity did not previously exist in
            the DAR.
          type: integer
        entity:
          anyOf:
          - $ref: '#/components/schemas/InternalEntitySummary'
          description: New full representation of Entity.  If omitted, the Entity
            will be deleted from the DAR.
    DARSubscriptionUpdate:
      description: Updated data for a Subscription stored internally in the DAR within
        the DSS.  Must be exchanged in a standardized format between DSS instances
        to maintain a DSS airspace representation.
      required:
      - id
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: The Subscription being created, updated, or deleted.
        previous_version:
          description: The previous version of this Subscription within the DAR.  An
            update will only be successful if the Subscription has not changed since
            the request was formed.  Omit this field if the Subscription did not previously
            exist in the DAR.
          type: integer
        subscription:
          anyOf:
          - $ref: '#/components/schemas/InternalSubscription'
          description: New full representation of Subscription.  If omitted, the Subscription
            will be deleted from the DAR.
    DARConfiguration:
      description: Configuration of the portion of the DAR hosted by this organization.
      required:
      - time_effective
      - dar_nodes
      - environment
      type: object
      properties:
        time_effective:
          format: date-time
          description: The datetime at which this configuration became effective,
            or will become effective.
          type: string
        time_end:
          format: date-time
          description: The datetime at which this configuration will no longer apply.  If
            omitted, this configuration is intended to be active indefinitely.
          type: string
        dar_nodes:
          description: List of all CockroachDB nodes participating in the DAR hosted
            by this provider.
          type: array
          items:
            $ref: '#/components/schemas/DARNodeConfiguration'
        environment:
          description: Environment to which this configuration applies.  The production
            environment shall have the value `production` and the test environment
            shall have the value `test`, but other values are allowed as well.  All
            CockroachDB nodes in a named environment are expected to interact with
            all other providers' nodes in that environment.
          type: string
          example: production
    ConstraintDetails:
      description: Constraint-specific Entity details.
      type: object
    OperationDetails:
      description: Operation-specific Entity details.
      type: object
      properties:
        rogue_flight:
          oneOf:
          - $ref: '#/components/schemas/RogueFlight'
          description: If this Operation is rogue, this field contains the details
            for tracking that flight.
    RogueFlight:
      description: Details about a rogue flight inside a Constraint.
      type: object
      properties:
        position_reporting_url:
          $ref: '#/components/schemas/RIDFlightsURL'
        flight_id:
          description: This flight ID may be used to request real-time position updates
            for the rogue aircraft in this Constraint through the specified remote
            ID interface.
          allOf:
          - $ref: '#/components/schemas/RIDFlightID'
    EntityType:
      description: |-
        Type of Entity.  The API of the URL associated with an Entity depends on its EntityType.

        `PositionReporting`: A spacetime volume in which a remote ID service provider will provide remote ID services.

        `Constraint`: A region of airspacetime that imposes limitations on, or provides special information to, flights within it.

        `AirspaceAwarenessProvider`: A spacetime volume in which a consumer wishes to receive notifications about UTM airspace changes, but is not conducting an Operation.

        `Operation`: A single deconflicted UTM operation.
      enum:
      - PositionReporting
      - Constraint
      - AirspaceAwarenessProvider
      - Operation
      type: string
    RIDHistoricalAircraftPosition:
      description: ""
      required:
      - time
      - position
      type: object
      properties:
        time:
          format: date-time
          description: Time at which this position applied.
          type: string
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
    PutEntityDetailsParameters:
      description: Parameters of a message informing of new Entity details.  Usually
        pushed (by a client, not the DSS) directly to clients with subscriptions when
        another client makes a change to airspace within a cell with a subscription.
      required:
      - entity
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        entity:
          anyOf:
          - $ref: '#/components/schemas/EntityDetails'
          description: Entity that the notifying client changed or created.
    PutEntityDetailsResponse:
      description: Response to a USS-USS notification of new or updated Entity details.
      required:
      - entity
      type: object
      properties:
        entity:
          anyOf:
          - $ref: '#/components/schemas/EntityDetails'
          description: Current representation of the affected Entity.
    Latitude:
      format: double
      description: Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.123
    Longitude:
      format: double
      description: Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456
    LatLngPoint:
      description: Point on the earth's surface.
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'
    RIDAircraftState:
      description: State of an aircraft for the purposes of remote ID.
      required:
      - timestamp
      - timestamp_accuracy
      - accuracy_h
      - accuracy_v
      - speed
      - vertical_speed
      - track
      - speed_accuracy
      - position
      type: object
      properties:
        timestamp:
          format: date-time
          description: Time at which this state was valid.  This may be the time coming
            from the source, such as a GPS, or the time when the system computes the
            values using an algorithm such as an Extended Kalman Filter (EKF).  Timestamp
            must be expressed with a minimum resolution of 1/10th of a second.
          type: string
        timestamp_accuracy:
          format: float
          description: Declaration of timestamp accuracy in seconds, precise to at
            least 10ths of a second, to determine time of applicability.
          minimum: 0
          exclusiveMinimum: false
          type: number
        operational_status:
          $ref: '#/components/schemas/RIDOperationalStatus'
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
        track:
          format: float
          description: Direction of flight expressed as a "True North-based" ground
            track angle.  This value is provided in degrees East of North with a minimum
            resolution of 1 degree.
          maximum: 360
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: number
        speed:
          format: float
          description: Ground speed of flight in meters per second.  Minimum resolution
            of 0.25 m/s.
          minimum: 0
          exclusiveMinimum: false
          type: number
          example: 1.9
        speed_accuracy:
          anyOf:
          - $ref: '#/components/schemas/SpeedAccuracy'
          description: Accuracy of horizontal ground speed.
        vertical_speed:
          format: float
          description: Speed up (vertically) WGS84-HAE, m/s.
          type: number
          example: 0.2
        height:
          $ref: '#/components/schemas/RIDHeight'
        group_radius:
          format: float
          description: Farthest horizontal distance from reported group location at
            which an aircraft in the group may be located (meters).
          minimum: 0
          exclusiveMinimum: true
          type: number
        group_ceiling:
          format: float
          description: Maximum altitude (meters WGS84-HAE) of Group Operation
          type: number
        group_floor:
          format: float
          description: Minimum altitude (meters WGS84-HAE) of Group Operation.  If
            not specified, ground level shall be assumed.
          type: number
    Altitude:
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5
    Subscription:
      description: Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
      required:
      - id
      - url
      - notification_index
      - owner
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: Unique identifier for this subscription.
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
          type: string
          example: myuss
        url:
          anyOf:
          - $ref: '#/components/schemas/EntityDetailsURL'
          description: Other clients must call this endpoint with created/updated
            Entity details when requested by the DSS (requested when they change the
            airspace in the associated cells).
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        expires:
          format: date-time
          description: If set, this subscription will be automatically removed after
            this time.
          type: string
        last_used:
          format: date-time
          description: Used to automatically delete stale UTM subscriptions (subscriptions
            not used to create or modify any Key-requiring Entities in the recent
            past).
          type: string
        types_filter:
          description: EntityTypes whose creation, mutation, or deletion should trigger
            notifications for this Subscription.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/EntityType'
    InternalEntitySummary:
      description: The information about an Entity that the DSS stores internally
        and synchronizes between different DSS instances.
      required:
      - summary
      - affected_cells
      type: object
      properties:
        summary:
          anyOf:
          - $ref: '#/components/schemas/EntitySummary'
          description: Information about this Entity accessible outside the DSS.
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: Provided by client upon declaration of a UTM Entity.  Used
            to check the validity of a Key provided for airspace that includes this
            EntitySummary, and to ensure proper version incrementation upon Entity
            updates.
        affected_cells:
          description: Ensure consistent mutation and deletion of EntitySummaries
            in/from the DSS in the off-nominal case where a DSS client declares an
            Entity in one area, but then deletes it from a slightly different area.  This
            would otherwise leave behind a now-invalid Entity declaration in the cells
            included in the creation area but omitted from the deletion area.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/DARCellID'
        subscription:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: A subscription created automatically for this EntitySummary.  If
            no subscription was provided upon creation of an Entity that requires
            airspace awareness, the DSS will create an appropriate AreaSubscription
            to provide flight-critical notifications like rogue aircraft or UVRs.  This
            automatic subscription is not necessary for Position Reporting Entities.
    InternalSubscription:
      description: The information about a Subscription that the DSS stores internally
        and synchronizes between different DSS instances.
      required:
      - subscription
      - affected_cells
      - scopes
      type: object
      properties:
        subscription:
          anyOf:
          - $ref: '#/components/schemas/Subscription'
          description: Publicly-accessible information about the subscription.
        affected_cells:
          description: Ensure consistent mutation and deletion of subscriptions in/from
            the DSS in the off-nominal case where a DSS client creates a subscription
            in one area, but then deletes it from a slightly different area.  This
            would otherwise leave behind a now-invalid subscription in the cells included
            in the creation area but omitted from the deletion area.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/DARCellID'
    EntityDetails:
      description: Detailed specification of obstacle, thing, or region of special
        significance in the airspace (Constraint or Operation are concrete/specific
        types of Entities). Note that this data is not stored in the DSS; only with
        the clients. Note that this may be expanded to include other types of volume-based
        entities in the airspace.
      required:
      - id
      - type
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this entity.  Created by client.
        type:
          $ref: '#/components/schemas/EntityType'
        volumes:
          description: Volumes that wholly contain the Entity while being as small
            as practical.  This field is required unless the Entity `type` is `PositionReporting`.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        position_reporting:
          anyOf:
          - $ref: '#/components/schemas/PositionReportingDetails'
          description: If this Entity is a PositionReporting Entity, this property
            is required and contains details about the PositionReporting Entity.
        constraint:
          anyOf:
          - $ref: '#/components/schemas/ConstraintDetails'
          description: If this Entity is a Constraint, this property is required and
            contains details about the Constraint.
        operation:
          anyOf:
          - $ref: '#/components/schemas/OperationDetails'
          description: If this Entity is an Operation, this property is required and
            contains details about the Operation.
        awareness_provider:
          anyOf:
          - $ref: '#/components/schemas/AirspaceAwarenessProviderDetails'
          description: If this Entity is an airspace awareness provider, this property
            is required and contains details about that provider.
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: Signature for this version of this Entity.  Includes information
            about the version of this Entity.  This property is required unless Entity
            `type` is `PositionReporting`.
    RIDFlight:
      description: Description of a remote ID flight.
      required:
      - id
      - aircraft_type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RIDFlightID'
        aircraft_type:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftType'
          description: Generic type of aircraft.
        current_state:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftState'
          description: The most up-to-date state of the aircraft.  Required unless
            `volumes` is specified.
        volumes:
          description: The set of spacetime volumes the aircraft is within.  Required
            if `current_state` is not specified.  The fields `time_start` and `time_end`
            are required if `current_state` is not specified.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        position_history:
          description: |-
            A short history of recent aircraft movement, specified only when `include_history` is true.  If `volumes` is not specified and `include_history` is true, then this field is required.

            Under no circumstances should more than 60 seconds of history be included.  A full 60 seconds of most recent history (excluding current position) is required, or as much history is available if there is less than 60 seconds of history.  This history does not need to include the current position.  The entries in this list should be in descending order according to time.
          type: array
          items:
            $ref: '#/components/schemas/RIDHistoricalAircraftPosition'
    GeoPolygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
      - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'
    PutSubscriptionParameters:
      description: Parameters for a request to create or update a subscription in
        the DSS.
      required:
      - extents
      - url
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
          description: The geographic extents of the volume to subscribe to.
        expiry:
          format: date-time
          description: This subscription will automatically be deleted after this
            time if it has not been refreshed by then.  If not specified when creating
            a subscription with a UTM scope, this subscription will be automatically
            deleted if it hasn't been used for a certain amount of time.  If not specified
            when creating a subscription without a UTM scope (such as for PositionReporting
            Entities), this value will be automatically set the maximum allowed Subscription
            duration in the future.
          type: string
        url:
          anyOf:
          - $ref: '#/components/schemas/EntityDetailsURL'
          description: Other clients will be instructed by the DSS to call this endpoint
            with created/updated Entity details when they create, update, or delete
            an Entity relevant to this Subscription.
        types_filter:
          description: EntityTypes whose creation, mutation, or deletion should trigger
            notifications for this Subscription.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/EntityType'
    EntityTypeListString:
      description: String of comma-separated list of EntityTypes.
      pattern: ^(?:PositionReporting|Constraint|AirspaceAwarenessProvider|Operation)(?:,(?:PositionReporting|Constraint|AirspaceAwarenessProvider|Operation)){0,3}$
      type: string
  securitySchemes:
    AuthFromAuthorizationAuthority:
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            dss.read.position_reporting_entities: Client may query, read, or create
              subscriptions for PositionReporting Entities for remote ID.  Does not
              provide access to UTM-related Entities.  A remote ID display provider
              shall be granted this scope upon request.
            dss.write.position_reporting_entities: Client may create, edit, and delete
              PositionReporting Entities for remote ID.  A remote ID service provider
              shall be granted this scope upon request.
            dss.read.airspace_awareness: '`[UTM only]` In addition to `dss.read.position_reporting_entities`,
              client may query or read Entities related to airspace awareness.  A
              VLOS airspace awareness provider might use this scope.'
            dss.write.airspace_awareness: '`[UTM only]` In addition to `dss.read.airspace_awareness`,
              client may create airspace awareness Entities.  A VLOS airspace awareness
              provider would likely use this scope.'
            dss.write.operations: '`[UTM only]` In addition to `dss.write.airspace_awareness`,
              client may query, read, and create Operation Entities.  A strategic
              planning UTM provider would use this scope.'
            dss.write.constraints: '`[UTM only]` Client may create un-deconflicted
              constraints in the airspace.  A client acting on behalf of a governmental
              organization would use this scope.'
            dss.read.dar_configuration: Client may read information about the configuration
              of this DAR participant's portion of the DAR.  Any airspace service
              provider shall be granted this scope upon request.
      type: oauth2
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `aud`, with audience requested by client.
        * `exp`, with a time no further than 1 hour in the future.
        * `client_id`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.

        Multiple scopes for a single token shall be granted if requested.

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
security:
- AuthFromAuthorizationAuthority:
  - dss.read.position_reporting_entities
  - dss.write.position_reporting_entities
  - dss.read.airspace_awareness
  - dss.write.airspace_awareness
  - dss.write.operations
  - dss.write.constraints
tags:
- name: dss
  description: Endpoints exposed by the DSS server.
- name: p2p_rid
  description: Endpoints exposed by remote ID service providers for peer-peer communication.
- name: dar
  description: Communication necessary to synchronize DSS airspace representation
    information.
- name: p2p_entities
  description: Endpoints exposed by DSS clients for peer-peer communication of Entity
    details, including DSS-triggered subscription notifications.
