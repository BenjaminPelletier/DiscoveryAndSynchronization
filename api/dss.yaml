---
openapi: 3.0.2
info:
  title: Discovery and Synchronization Service
  version: 0.0.1
  description: |-
    Interface to Discovery and Synchronization Service and service providers used by participating clients to discover and inform other service providers.

    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
paths:
  /cells:
    summary: Geographic segmentation cells of DSS airspace representation internal
      to the DSS constellation.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDARCellsParameters'
        required: true
      tags:
      - dar
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutDARCellsResponse'
          description: The specified DAR cells were updated successfully.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutDARCellsResponse'
          description: DAR cells could not be updated because at least one cell had
            been changed before this transaction could be executed.
      summary: 'DAR: /cells'
      description: Update the contents in the DSS airspace representation for a set
        of cells.  Note that this operation will probably not be hosted at a standard
        endpoint; instead, the idea of writing information to an endpoint like this
        will be accomplished via the DAR synchronization interface which may be an
        atomic broadcast system like Apache Zookeeper.
  /constraints/{id}:
    summary: Public Constraint Entities stored in the DSS.
    get:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityDetails'
          description: The Constraint details were retrieved successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /constraints/{id}'
      description: '`[UTM only]` Retrieve the details of a public Constraint Entity
        stored in the DAR and exposed by DSS instances.  This path''s GET API is compatible
        with a GET for an EntityDetailsURLs.'
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEntityParameters'
        required: true
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityResponse'
          description: Constraint was successfully added to the airspace.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.write.constraints
      summary: 'DSS: /constraints/{id}'
      description: '`[UTM only]` Publish a new public Constraint that will be stored
        in the DAR and exposed by DSS instances (details do not need to be hosted
        by the requesting client).'
    delete:
      tags:
      - dss
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEntityResponse'
          description: Constraint was successfully deleted from DSS.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.write.constraints
      summary: 'DSS: /constraints/{id}'
      description: '`[UTM only]` Delete a public Constraint stored in the DAR and
        served from the DSS.'
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        type: string
      in: path
      required: true
  /dar_constraints/{id}:
    summary: Constraints stored directly in the DSS airspace representation internal
      to the DSS constellation.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutDARConstraintParameters'
        required: true
      tags:
      - dar
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutDARConstraintResponse'
          description: The specified Constraint was propagated to the DAR successfully.
        409:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutDARConstraintResponse'
          description: Constraint could not be updated because it had changed remotely.
      summary: 'DAR: /dar_constraints'
      description: Update the contents in the DSS airspace representation for a particular
        constraint.  Note that this operation will probably not be hosted at a standard
        endpoint; instead, the idea of writing information to an endpoint like this
        will be accomplished via the DAR synchronization interface which may be an
        atomic broadcast system like Apache Zookeeper.
    parameters:
    - name: id
      description: EntityUUID of the Constraint.
      schema:
        type: string
      in: path
      required: true
  /flights:
    summary: Basic operation details to meet remote ID requirements.
    description: This endpoint may be polled by remote ID display providers to display
      basic aircraft activity near a user in real time.
    get:
      tags:
      - p2p_rid
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightsResponse'
          description: Flight information was successfully retrieved.
        404:
          description: The requested view is entirely outside any remote ID service
            provision areas (PositionReporting Entity volumes) this provider has.  A
            display provider receiving this response should discontinue polling for
            this endpoint for the view port requested until otherwise directed by
            DSS interactions.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'RID: /flights'
      description: Retrieve basic flight information to meet remote ID requirements.  This
        endpoint will be polled by remote ID display providers to display basic aircraft
        activity near a user in real time.  All flights that have any recent position
        history (duration defined in standard) inside the requested box must be returned.
    parameters:
    - name: view
      description: 'The area of this view: latmin,lngmin,latmax,lngmax.  Size may
        not exceed a diagonal length specified in the standard.'
      schema:
        pattern: ^-?\d{1,3}(?:\.\d*)?,-?\d{1,3}(?:\.\d*)?,-?\d{1,3}(?:\.\d*)?,-?\d{1,3}(?:\.\d*)?$
        type: string
        example: 29.97816,31.13296,29.98025,31.13535
      in: query
      required: true
    - name: last_poll
      description: If specified, the timestamp of the last time this box was polled
        by the requesting display provider.  The service provider may limit data returned
        to only data which has changed since `last_poll` (see details mentioning `last_poll`
        below).
      schema:
        format: date-time
        type: string
        example: 2019-07-01T00:01:02.345Z
      in: query
  /entities:
    summary: Set of airspace Entities in the DSS.
    description: ""
    get:
      tags:
      - dss
      parameters:
      - name: polygon
        description: The area in which to search for Entities.  Some Entities near
          this area but wholly outside it may also be returned.
        schema:
          $ref: '#/components/schemas/GeoPolygonString'
        in: query
        required: true
      - name: earliest_time
        description: If specified, indicates non-interest in any Entities that end
          before this time.
        schema:
          format: date-time
          type: string
        in: query
      - name: latest_time
        description: If specified, indicates non-interest in any Entities that start
          after this time.
        schema:
          format: date-time
          type: string
        in: query
      - name: min_altitude
        description: If specified, indicates non-interest in Entities entirely below
          this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      - name: max_altitude
        description: If specified, indicates non-interest in Entities entirely above
          this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEntitiesResponse'
          description: Declarations of Entities were successfully retrieved.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
        - dss.read.airspace_awareness
      summary: 'DSS: /entities'
      description: |-
        Retrieve references to all visible airspace Entities in the DAR for a given area during the given time.  Note that some Entities will lie entirely outside the requested area because an individual DAR cell cannot filter EntitySummaries by exact geography.

        Only PositionReporting Entities shall be visible to clients providing the `dss.read.position_reporting_entities` scope.
  /subscriptions:
    summary: Subscriptions for airspace updates to a volume of interest.  Only Subscriptions
      belonging to the caller are returned.
    get:
      tags:
      - dss
      parameters:
      - name: polygon
        description: The area in which to search for Subscriptions.  Some Subscriptions
          near this area but wholly outside it may also be returned.
        schema:
          $ref: '#/components/schemas/GeoPolygonString'
        in: query
        required: true
      - name: min_altitude
        description: If specified, indicates non-interest in subscriptions for volumes
          entirely below this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      - name: max_altitude
        description: If specified, indicates non-interest in subscriptions for volumes
          entirely above this altitude in meters above the WGS84 datum.
        schema:
          type: number
        in: query
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /subscriptions'
      description: Retrieve subscriptions intersecting an area of interest.
  /entity_details/{id}:
    summary: Details of a UTM Entity.
    get:
      tags:
      - p2p_entities
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityDetails'
          description: The Entity details were retrieved successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'Entities: /entity_details/{id}'
      description: |-
        Retrieve the details of an Entity owned by the client.  Note that this request should be denied if the authorization scope does not provide access to the type of Entity being requested.

        Implementation of this endpoint is not required for remote ID service providers (nor remote ID display providers since they do not create Entities).
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEntityNotificationParameters'
        required: true
      tags:
      - p2p_entities
      responses:
        204:
          description: Entity details were received successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'Entities: /entity_details/{id}'
      description: Publish new information about an Entity to this client (usually
        because of instructions from the DSS triggered by a subscription).
    delete:
      tags:
      - p2p_entities
      responses:
        204:
          description: Notification of Entity deletion was received successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'Entities: /entity_details/{id}'
      description: Publish a notification about the deletion of an Entity to this
        client (usually because of instructions from the DSS triggered by a subscription).
    parameters:
    - name: id
      description: EntityUUID of the Entity details.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true
  /subscriptions/{id}:
    summary: Subscription for airspace updates to a volume of interest.
    get:
      tags:
      - dss
      parameters:
      - name: location
        description: The approximate location of the Subscription must be specified
          to find it in the DSS.  This point may lie anywhere within the Subscription's
          extents, and must be specified in the form "latitude,longitude".
        schema:
          type: string
        in: query
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: Subscription information was retrieved successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /subscriptions/{id}'
      description: Verify the existence/valdity and state of a particular subscription.
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      tags:
      - dss
      parameters:
      - name: id
        description: SubscriptionUUID of the subscription of interest.  Must be created
          by client before `PUT` call to create AreaSubscription in DSS because the
          client may receive a notification at that subscription before receiving
          a response from the DSS.
        schema:
          $ref: '#/components/schemas/SubscriptionUUID'
        in: path
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: Subscription was created or updated successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
        - dss.write.airspace_awareness
      summary: 'DSS: /subscriptions/{id}'
      description: |-
        Create or update a subscription.

        Note that the types of content that should be sent to the created subscription depends on the scope in the provided access token.
    delete:
      tags:
      - dss
      parameters:
      - name: location
        description: The approximate location of the Subscription must be specified
          to find it in the DSS.  This point may lie anywhere within the Subscription's
          extents.
        schema:
          $ref: '#/components/schemas/LocationString'
        in: query
        required: true
      responses:
        204:
          description: Subscription was deleted successfully.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.write.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /subscriptions/{id}'
      description: Delete a subscription.
    parameters:
    - name: id
      description: SubscriptionUUID of the subscription of interest.
      schema:
        $ref: '#/components/schemas/SubscriptionUUID'
      in: path
      required: true
  /entities/{id}:
    summary: An Entity reference in the DSS (does not include all Entity details).
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutEntityParameters'
        required: true
      tags:
      - dss
      parameters:
      - name: id
        description: EntityUUID of the Entity.  If creating (declaring for the first
          time) an Entity that follows the details workflow (this excludes PositionReporting
          Entities), the client must be ready to respond to requests for details about
          it as soon as the PUT request is issued (before a response is received from
          the DSS).
        schema:
          $ref: '#/components/schemas/EntityUUID'
        in: path
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutEntityResponse'
          description: The Entity reference was created or updated successfully in
            the DSS.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /entities/{id}'
      description: |-
        Create or update reference to an Entity.  Unless otherwise specified, the EntityType of an existing Entity may not be changed.

        The `details_url` field in the request body is required for all Entities except PositionReporting Entities.

        `PositionReporting Entities`:
        Authorization scope `dss.write.position_reporting_entities` is required.  The DSS assumes the USS has already added the appropriate retention period to operation end time in EntitySummary's `time_end` extents field before storing it.  Updating `time_start` is not allowed if it is before the current time.

        `Operation Entities`:
        Authorization scope `dss.write.operation_entities` is required.
    delete:
      tags:
      - dss
      parameters:
      - name: location
        description: The approximate location of the Entity reference must be specified
          to find it in the DSS.  This point may lie anywhere within the Entity's
          extents.
        schema:
          $ref: '#/components/schemas/LocationString'
        in: query
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEntityResponse'
          description: Reference to Entity was successfully deleted from DSS.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.write.position_reporting_entities
        - dss.write.airspace_awareness
        - dss.write.operations
      summary: 'DSS: /entities/{id}'
      description: Delete reference to an Entity.  USSs should not delete PositionReporting
        Entities before the end of the last managed flight plus the retention period.
    parameters:
    - name: id
      description: EntityUUID of the Entity.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true
  /flights/{id}:
    summary: Basic operation details to meet remote ID requirements.
    description: This endpoint may be polled by remote ID display providers to display
      basic aircraft activity near a user in real time.
    get:
      tags:
      - p2p_rid
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightsResponse'
          description: Flight information was successfully retrieved.
        404:
          description: All of the requested views are outside any remote ID service
            provision areas (PositionReporting Entity volumes) this provider has.  A
            display provider receiving this response should discontinue polling for
            this endpoint for the set of view ports requested until otherwise directed
            by DSS interactions.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'RID: /flights/{id}'
      description: Retrieve basic flight information to meet remote ID requirements
        for a specific flight.  This endpoint may be polled by remote ID display providers
        to display basic aircraft activity for a specific flight.
    parameters:
    - name: id
      description: Remote ID flight ID for this flight; may be obtained in general
        /flights query.
      schema:
        $ref: '#/components/schemas/RIDFlightID'
      in: path
      required: true
  /flights/{id}/details:
    summary: A remote ID flight reported by a remote ID service provider.
    get:
      tags:
      - p2p_rid
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightDetailsResponse'
          description: Flight details were successfully retrieved.
      security:
      - AuthFromJurisdictionalAuthority:
        - dss.read.position_reporting_entities
        - dss.read.airspace_awareness
        - dss.write.operations
      summary: 'RID: /flights/{id}/details'
      description: Retrieve details of a flight to meet remote ID requirements.
    parameters:
    - name: id
      description: Remote ID flight ID for this flight; may be obtained in general
        /flights query.
      schema:
        $ref: '#/components/schemas/RIDFlightID'
      in: path
      required: true
components:
  schemas:
    EntitySignature:
      title: EntitySignature
      description: A token associated with a particular UTM Entity+version created
        by the client who created the associated Entity.  The EntitySignature is provided
        to the DSS to store privately and then compared against entries in a Key provided
        to mutate the airspace.  The EntitySignature is also provided by the client
        whenever that client transmits the details of the Entity (either via GET,
        or via a subscription notification).
      required:
      - token
      - version
      type: object
      properties:
        version:
          format: int32
          description: This version must increase each time an Entity is modified.  If
            a client ever receives a subscription update with an EntitySignature for
            a particular EntityUUID that is smaller than the cached EntitySignature
            for that EntityUUID, that subscription update should be ignored.  If the
            DSS ever receives a request to mutate an EntitySummary with an EntitySignature
            containing a token that is not greater than the current DSS contents,
            the request will be rejected.
          type: integer
        token:
          anyOf:
          - $ref: '#/components/schemas/Token'
          description: Unique value associated with a specific version of a specific
            Entity.
    DeconflictionKey:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current DeconflictionKey-constructed from information obtained with a previous read operation and subsequent requests for details, and optionally, subscription updates—for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: object
      properties:
        signatures:
          anyOf:
          - $ref: '#/components/schemas/SignatureDictionary'
          description: For each of a subset of Entities declared by the DSS in the
            area of interest, the signature of the current version of the full details
            of that Entity.  This EntitySignature is provided by the client who defined
            the Entity, accompanying the full Entity definition data when that data
            is received.
        hashes:
          anyOf:
          - $ref: '#/components/schemas/DeconflictionKeyHash'
          description: Optional (optimization).  May be provided for a set of Entities
            so that each of the included EntitySignatures does not need to be included
            in the `signatures` property.
        subscription:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: If the client obtained the information in this DeconflictionKey
            via a subscription, this field is set to the ID of that subscription so
            the usage of subscriptions can be tracked and unused subscriptions can
            be removed.
    DeconflictionKeyHash:
      description: A shortcut (optimization) data structure that may be provided instead
        of a large set of individually-listed EntitySignatures.
      required:
      - entity_ids
      - entity_signatures
      type: object
      properties:
        entity_ids:
          anyOf:
          - $ref: '#/components/schemas/Hash'
          description: Hash of an ordered list of other clients’ EntityUUIDs in the
            airspace (obtained from DSS via GET ~/entities) excluding the EntityUUIDs
            explicitly specified in DeconflictionKey's `signatures` property.
        entity_signatures:
          anyOf:
          - $ref: '#/components/schemas/Hash'
          description: Hash of an ordered list of EntitySignatures that correspond
            with the list of EntityUUIDs used to generate the `entity_ids` property
            value.
    Altitude:
      description: An altitude relative to the earth.
      required:
      - height
      - reference
      type: object
      properties:
        height:
          anyOf:
          - $ref: '#/components/schemas/Distance'
          description: Distance above reference datum.
        reference:
          description: The reference datum above which the height is reported.
          enum:
          - WGS84
    Distance:
      title: Distance
      description: Representation of a linear distance.
      required:
      - value
      - units
      type: object
      properties:
        value:
          format: float
          type: number
          example: 19.5
        units:
          enum:
          - m
          - ft
          example: m
    Volume3D:
      description: A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
      - footprint
      type: object
      properties:
        footprint:
          anyOf:
          - $ref: '#/components/schemas/GeoPolygon'
          description: Projection of this volume onto the earth's surface.
        altitude_lo:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Minimum bounding altitude of this volume.
        altitude_hi:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Maximum bounding altitude of this volume.
    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - spatial_volume
      type: object
      properties:
        spatial_volume:
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
          description: Constant spatial extent of this volume.
        time_start:
          format: date-time
          description: Beginning time of this volume.
          type: string
        time_end:
          format: date-time
          description: End time of this volume.
          type: string
    SubscriberToNotify:
      description: Subscriber to notify of a change/mutation in the airspace.  This
        is provided by the DSS to a client changing the airspace, and it is the responsibility
        of the client changing the airspace (they will receive a set of SubscriberToNotifies)
        to send an AreaChangeNotification to each specified `callback`.
      required:
      - subscriptions
      - url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        url:
          anyOf:
          - $ref: '#/components/schemas/EntityDetailsURL'
          description: The endpoint that the client mutating the airspace should provide
            the updated Entity to.
    GetEntitiesResponse:
      description: Response to DSS query for summaries of Entities in an area of interest.
      required:
      - entities
      type: object
      properties:
        entities:
          description: Declarations/summaries of Entities in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/EntitySummary'
    PutSubscriptionParameters:
      description: Parameters for a request to create or update a subscription in
        the DSS.
      required:
      - extents
      - url
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume3D'
          description: The geographic extents of the volume to subscribe to.
        expiry:
          format: date-time
          description: This subscription will automatically be deleted after this
            time if it has not been refreshed by then.  If not specified, this subscription
            will be automatically deleted if it hasn't been used for a certain amount
            of time.
          type: string
        url:
          anyOf:
          - $ref: '#/components/schemas/EntityDetailsURL'
          description: Other clients must call this endpoint with created/updated
            Entity details when requested by the DSS (requested when they change the
            airspace in the associated cells).
    InternalSubscription:
      description: The information about a Subscription that the DSS stores internally
        and synchronizes between different DSS instances.
      required:
      - subscription
      - affected_cells
      - scope
      type: object
      properties:
        subscription:
          anyOf:
          - $ref: '#/components/schemas/Subscription'
          description: Publicly-accessible information about the subscription.
        affected_cells:
          description: Ensure consistent mutation and deletion of subscriptions in/from
            the DSS in the off-nominal case where a DSS client creates a subscription
            in one area, but then deletes it from a slightly different area.  This
            would otherwise leave behind a now-invalid subscription in the cells included
            in the creation area but omitted from the deletion area.
          type: array
          items:
            $ref: '#/components/schemas/DARCellID'
        scope:
          anyOf:
          - $ref: '#/components/schemas/AuthorizationScope'
          description: Authorization scope used to create this subscription; used
            to filter which Entity changes will prompt notifications to be sent to
            this subscription.
    GetSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
    GetFlightsResponse:
      description: Response to remote ID provider query for flight information in
        an area of interest.
      required:
      - timestamp
      - flights
      type: object
      properties:
        timestamp:
          format: date-time
          description: The remote ID service provider's timestamp for when this information
            was current.  May be provided in `last_poll` query parameter to request
            only data which has changed since this timestamp.
          type: string
        flights:
          description: A list of all flights that have been within the requested area
            within the remote ID retention period (if `last_poll` was not specified
            in the request) or have changed since the `last_poll` timestamp.  This
            includes flights that are not currently within the requested area, but
            were within the requested area within the remote ID retention period.
          type: array
          items:
            $ref: '#/components/schemas/RIDFlight'
    PutDARCellsParameters:
      description: Parameters for a request to update cells in the DSS airspace representation.
      required:
      - updates
      type: object
      properties:
        updates:
          description: A set of updates to DAR cells to apply in a single transaction.
          type: array
          items:
            $ref: '#/components/schemas/DARCellUpdate'
    DARCellUpdate:
      description: Updated data stored internally in DAR cells within the DSS.  Must
        be exchanged in a standardized format between DSS instances to maintain a
        DSS airspace representation.
      required:
      - entities
      - subscriptions
      - cell
      - version
      type: object
      properties:
        subscriptions:
          description: Details of everyone who must be notified when a client changes
            the airspace.
          type: array
          items:
            $ref: '#/components/schemas/InternalSubscription'
        cell:
          anyOf:
          - $ref: '#/components/schemas/DARCellID'
          description: The DAR cell containing this information.
        version:
          description: The previous version of the contents of this cell.  An update
            will only be successful if the cell contents have not changed since the
            request was formed.
          type: integer
        entities:
          description: References to all the Entities in the airspace contained in
            this DAR cell.
          type: array
          items:
            $ref: '#/components/schemas/InternalEntitySummary'
    PutDARCellsResponse:
      description: Response to a request to update cells in the DAR.
      type: object
      properties:
        conflicted_cells:
          description: If any cells had been updated since the information used to
            form the transaction request, those out-of-date cells will be listed here
            in the case of a 409 Conflict response.
          type: array
          items:
            $ref: '#/components/schemas/DARCellID'
    PutDARConstraintResponse:
      description: Response to a request to create or update Constraint details in
        the DAR.
      type: object
    InternalConstraint:
      description: Data stored in the DAR for a Constraint whose details are stored
        in the DAR and provided by the DSS.
      required:
      - constraint
      - signature
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/EntityDetails'
        signature:
          $ref: '#/components/schemas/EntitySignature'
    PutDARConstraintParameters:
      description: Parameters for a request to create or update a Constraint stored
        in the DSS airspace representation.
      required:
      - constraint
      type: object
      properties:
        constraint:
          anyOf:
          - $ref: '#/components/schemas/InternalConstraint'
          description: Entity details of Constraint to store in the DSS airspace representation.
        version:
          description: The previous version of this Constraint in the DAR.  Omit this
            property if the Constraint did not previously exist in the DAR.
          type: integer
    EntityType:
      description: |-
        Type of Entity.  The API of the URL associated with an Entity depends on its EntityType.

        `PositionReporting`: A spacetime volume in which a remote ID service provider will provide remote ID services.

        `Operation`: A single deconflicted UTM operation.
      enum:
      - Operation
      - Constraint
      - PositionReporting
      - AirspaceAwarenessProvider
      type: string
    ConstraintDetails:
      description: Constraint-specific Entity details.
      type: object
      properties:
        rogue_flight:
          oneOf:
          - $ref: '#/components/schemas/RogueFlight'
          description: If this Constraint contains a rogue flight, this field contains
            the details of that flight.
    RogueFlight:
      description: Details about a rogue flight inside a Constraint.
      type: object
      properties:
        position_reporting_url:
          $ref: '#/components/schemas/RIDFlightsURL'
        flight_id:
          description: This flight ID may be used to request real-time position updates
            for the rogue aircraft in this Constraint through the specified remote
            ID interface.
          type: string
    DeleteEntityResponse:
      description: Response for a request to delete an Entity.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Entity just deleted.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
    AuthorizationScope:
      description: The scope included in an access token used to access one of the
        endpoints in this API.
      enum:
      - dss.read.position_reporting_entities
      - dss.write.position_reporting_entities
      - dss.read.airspace_awareness
      - dss.write.airspace_awareness
      - dss.write.operation
      type: string
    URL:
      description: Valid http or https URL.
      pattern: '^https?:\/\/(?:\[[0-9a-fA-F]{0,4}(?::[0-9a-fA-F]{0,4}){2,7}\]|[^\0\t\r\n
        #%\/:?@[\\\]]{1,63}(?:\.[^\0\t\r\n #%\/:?@[\\\]]{1,63}){1,126})(?::\d{1,5})?\/?'
      type: string
    Hash:
      description: Base64 representation of a SHA256 hash of the given inner content.  If
        this Hash is for multiple entries, the entries should be concatenated together
        with delimiting commas (but no spaces) before performing the hash.  For instance,
        the Hash of the three UUIDs 4704a043-8212-4256-9dec-7ef5a79218e2, b1220203-fc2a-422d-9604-12464a9b45e0,
        and cca95e90-3163-47d8-bb0e-a7c5c88f078f would be d8NoNy0cPAd7D3b8Qb0DSzcrBVJElwBfmqVcytIoWsk=
        in base64 which is 77c368372d1c3c077b0f76fc41bd034b372b05524497005f9aa55ccad2285ac9
        in hexadecimal.
      maxLength: 44
      minLength: 44
      pattern: ^[0-9a-zA-Z+\/]{43}=$
      type: string
      example: d8NoNy0cPAd7D3b8Qb0DSzcrBVJElwBfmqVcytIoWsk=
    InternalEntitySummary:
      description: The information about an Entity that the DSS stores internally
        and synchronizes between different DSS instances.
      required:
      - summary
      - affected_cells
      type: object
      properties:
        summary:
          anyOf:
          - $ref: '#/components/schemas/EntitySummary'
          description: Information about this Entity accessible outside the DSS.
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: Provided by client upon declaration of a UTM Entity.  Used
            to check the validity of a Key provided for airspace that includes this
            EntitySummary, and to ensure proper version incrementation upon Entity
            updates.
        affected_cells:
          description: Ensure consistent mutation and deletion of EntitySummaries
            in/from the DSS in the off-nominal case where a DSS client declares an
            Entity in one area, but then deletes it from a slightly different area.  This
            would otherwise leave behind a now-invalid Entity declaration in the cells
            included in the creation area but omitted from the deletion area.
          type: array
          items:
            $ref: '#/components/schemas/DARCellID'
        subscription:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: A subscription created automatically for this EntitySummary.  If
            no subscription was provided upon creation of an Entity that requires
            airspace awareness, the DSS will create an appropriate AreaSubscription
            to provide flight-critical notifications like rogue aircraft or UVRs.  This
            automatic subscription is not necessary for Position Reporting Entities.
    LatLngBox:
      description: Rectangular geographic area in lat-lng space.
      required:
      - lat_hi
      - lat_lo
      - lng_hi
      - lng_lo
      type: object
      properties:
        lat_lo:
          anyOf:
          - $ref: '#/components/schemas/Latitude'
          description: Area is north of this latitude in degrees.
        lat_hi:
          anyOf:
          - $ref: '#/components/schemas/Latitude'
          description: Area is south of this latitude in degrees.
        lng_lo:
          anyOf:
          - $ref: '#/components/schemas/Longitude'
          description: Area is east of this longitude in degrees.
        lng_hi:
          anyOf:
          - $ref: '#/components/schemas/Longitude'
          description: Area is west of this longitude in degrees.
    Latitude:
      format: double
      description: Degrees of latitude north of the equator.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.123
    Longitude:
      format: double
      description: Degrees of longitude east of the Prime Meridian.
      maximum: -180
      exclusiveMaximum: false
      minimum: 180
      exclusiveMinimum: false
      type: number
      example: -118.456
    LatLngPoint:
      description: Point on the earth's surface.
      required:
      - lat
      - lng
      type: object
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lng:
          $ref: '#/components/schemas/Longitude'
    OperationDetails:
      description: Operation-specific Entity details.
      type: object
    PutEntityNotificationParameters:
      description: Parameters of a message informing of new Entity details.  Usually
        pushed (by a client, not the DSS) directly to clients with subscriptions when
        another client makes a change to airspace within a cell with a subscription.
      required:
      - entity
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
        entity:
          description: Entity or Entities that the notifying client changed or created.
          type: array
          items:
            $ref: '#/components/schemas/EntityDetails'
    PutOperationParameters:
      description: Additional parameters for a request to create or update a reference
        to an Operation Entity in the DSS.
      required: []
      type: object
      properties:
        key:
          anyOf:
          - $ref: '#/components/schemas/DeconflictionKey'
          description: Proof that the client is aware of (and has deconflicted with)
            all relevant Entities.  Required unless Operation is declared rogue.
    PutEntityResponse:
      description: Response to a request to create or update a reference to an Entity
        in the DSS.
      required:
      - entity_summary
      - subscribers
      - location
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Entity changes just made.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
        entity_summary:
          anyOf:
          - $ref: '#/components/schemas/EntitySummary'
          description: Resulting summary stored in DSS.
        location:
          $ref: '#/components/schemas/LocationString'
    LocationString:
      description: An approximate location of an Entity or Subscription, which must
        be specified to find it in the DSS in a future PUT or DELETE call.  Returned
        in the form of "latitude,longitude".
      maxLength: 35
      minLength: 3
      pattern: ^-?\d{1,3}(?:\.\d*)?,-?\d{1,3}(?:\.\d*)?$
      type: string
    PutSubscriptionResponse:
      description: Response for a request to create or update a subscription.
      required:
      - location
      - subscription
      - entities
      type: object
      properties:
        entities:
          description: Declarations/summaries of Entities in the subscription area
            at the time of creation/update.
          type: array
          items:
            $ref: '#/components/schemas/EntitySummary'
        subscription:
          anyOf:
          - $ref: '#/components/schemas/Subscription'
          description: Result of the operation on the subscription.
        location:
          $ref: '#/components/schemas/LocationString'
    RIDFlightsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which the remote ID flights and their details may be retrieved.  See `/flights`, `/flights/{id}`, and `/flights/{id}/details` paths for specification of this endpoint.
        This URL is the base flights resource.  If this URL is specified as https://example.com/flights then the flight information for a particular {id} may be obtained at the URL https://example.com/flights/{id}.  This URL may not have a trailing / character.
      pattern: '[^\/]$'
      type: string
      example: https://example.com/flights
    SignatureDictionary:
      description: Collection of mappings between EntityUUID and EntitySignature.  Keys
        are string representations of `EntityUUIDs`.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EntitySignature'
    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer
    Subscription:
      description: Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., “planning area”).  Internal to the DSS.
      required:
      - id
      - url
      - notification_index
      - owner
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUUID'
          description: Unique identifier for this subscription.
        expires:
          format: date-time
          description: If set, this subscription will be automatically removed after
            this time.
          type: string
        last_used:
          format: date-time
          description: Used to automatically delete stale subscriptions.
          type: string
        url:
          anyOf:
          - $ref: '#/components/schemas/EntityDetailsURL'
          description: Other clients must call this endpoint with created/updated
            Entity details when requested by the DSS (requested when they change the
            airspace in the associated cells).
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner.
          type: string
          example: myuss
    SubscriptionState:
      description: State of AreaSubscription which is causing a notification to be
        sent.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
    UUIDv4:
      description: UUID v4.
      maxLength: 36
      minLength: 36
      pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$
      type: string
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39
    EntityUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for an Entity communicated through
        the DSS.  Formatted as UUIDv4.
    SubscriptionUUID:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier for a Subscription communicated through
        the DSS.  Formatted as UUIDv4.
    Token:
      anyOf:
      - $ref: '#/components/schemas/UUIDv4'
      description: Universally-unique identifier associated with a specific set of
        data.
    DARCellID:
      description: Descriptor for a particular cell in the DAR.  64-bit hexadecimal-string
        S2 cell ID; see https://s2geometry.io
      maxLength: 16
      minLength: 1
      pattern: ^[0-9a-fA-F]{1,16}$
      type: string
      example: 80cac31c
    GeoPolygonString:
      description: |-
        Plain-string representation of a geographic polygon consisting of at least three geographic points describing a closed polygon on the earth.  Each point consists of latitude,longitude in degrees.  Points are also comma-delimited, so this parameter will look like `lat1,lng1,lat2,lng2,lat3,lng3,...`

        The final polygon vertex does not need to be identical to the first vertex.  Latitude values must fall in the range [-90, 90] and longitude values must fall in the range [-180, 180].  The winding order shall be interpreted as the order which produces the smaller area.  The path between two vertices shall be the shortest possible path between those vertices.
      pattern: ^(?:-?\d{1,3}(?:\.\d*)?,){5}-?\d{1,3}(?:\.\d*)?(?:(?:,-?\d{1,3}(?:\.\d*)?){2})*$
      type: string
    RIDFlightID:
      description: ID, unique to a remote ID service provider, which identifies a
        particular flight for which the remote ID service provider is providing remote
        ID services.
      maxLength: 255
      minLength: 1
      pattern: ^[^\0\t\r\n#%\/:?@[\\\]]+$
      type: string
    EntitySummary:
      description: |-
        A declaration of an Entity.  The DSS reports only these EntitySummaries and clients must obtain full details peer-to-peer from the creator/owner.

        `details_url` is required for all Entity types except `PositionReporting`.
      required:
      - id
      - owner
      - type
      - version
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this object.  Created by client, and
            client must respond to a peer request for details about this Entity according
            to this ID.
        owner:
          description: Assigned by the DSS based on creating client’s ID (via access
            token).  Used for restricting mutation and deletion operations to owner,
            and only requiring EntitySignatures for unowned Entities.
          type: string
          example: myuss
        type:
          $ref: '#/components/schemas/EntityType'
        version:
          format: int32
          description: Extracted from the EntitySignature if specified, or assigned
            and incremented automatically otherwise.  When increased, indicates that
            an Entity has changed (allows another client client to optimize full Entity
            retrieval for only those Entities which have changed since client’s cache).
          type: integer
        time_end:
          format: date-time
          description: A planning client does not need to consider this Entity when
            considering time periods that will start after time_end.
          type: string
        time_start:
          format: date-time
          description: A planning client does not need to consider this Entity when
            considering time periods that will end before start_time.
          type: string
        details_url:
          $ref: '#/components/schemas/EntityDetailsURL'
        details:
          $ref: '#/components/schemas/DSSEntityDetails'
          description: ""
    DSSEntityDetails:
      description: |-
        Entity data fields stored in the DSS specific to particular Entity Types.

        For `PositionReporting` Entities, `flights_url` is required.
      type: object
      properties:
        flights_url:
          anyOf:
          - $ref: '#/components/schemas/RIDFlightsURL'
          description: For PositionReporting Entities, this field contains the `/flights`
            URL at which the `ridclient` endpoints may be found.
    PutPositionReportingDetails:
      description: Additional parameters for a request to create or update a reference
        to a PositionReporting Entity in the DSS.
      required:
      - flights_url
      type: object
      properties:
        flights_url:
          $ref: '#/components/schemas/RIDFlightsURL'
    EntityDetailsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which details about an Entity may be exchanged.  See the `/entity_details` path for specification of this endpoint.
        This URL is the base entity_details resource.  If this URL is specified as https://example.com/entity_details then the Entity details for a particular {id} may be exchanged at the URL https://example.com/entity_details/{id}.  This URL may not have a trailing / character.
      pattern: '[^\/]$'
      type: string
      example: https://example.com/entity_details
    GeoPolygon:
      description: An enclosed area on the earth.  The bounding edges of this polygon
        shall be the shortest paths between connected vertices.  This means, for instance,
        that the edge between two points both defined at a particular latitude is
        not generally contained at that latitude.  The final polygon vertex does not
        need to be identical to the first vertex.
      required:
      - points
      type: object
      properties:
        points:
          minLength: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'
    PutEntityParameters:
      description: Parameters for a request to create or update a reference to an
        Entity in the DSS.
      required:
      - extents
      - type
      type: object
      properties:
        extents:
          anyOf:
          - $ref: '#/components/schemas/Volume4D'
          description: The bounding spacetime extents of this Entity.  Start and end
            times must be specified.  Spatial information is translated into DAR cells
            internally by the DSS then discarded.
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: |-
            Signature for this version of this Entity.  May be used to verify that peer clients have retrieved the details of this Entity before being allowed to place deconflicted Entities into the airspace.
            This field is required when `type` is `Operation`.
        type:
          $ref: '#/components/schemas/EntityType'
        details_url:
          $ref: '#/components/schemas/EntityDetailsURL'
        position_reporting:
          anyOf:
          - $ref: '#/components/schemas/PutPositionReportingDetails'
          description: This field is required when `type` is `PositionReporting`.
        operation:
          anyOf:
          - $ref: '#/components/schemas/PutOperationParameters'
          description: This field is required when `type` is `Operation`.
        constraint:
          anyOf:
          - $ref: '#/components/schemas/PutConstraintParameters'
          description: This field is required when `type` is `Constraint`.
        awareness_provider:
          anyOf:
          - $ref: '#/components/schemas/PutAirspaceAwarenessProviderDetails'
          description: This field is required when `type` is `AirspaceAwarenessProvider`.
    AirspaceAwarenessProviderDetails:
      description: Entity details specific to an airspace awareness provider.
      type: object
    PutAirspaceAwarenessProviderDetails:
      description: Additional parameters for a request to create or update a reference
        to an AirspaceAwarenessProvider Entity in the DSS.
      type: object
    PutConstraintParameters:
      description: Additional parameters for a request to create or update a reference
        to a Constraint Entity in the DSS.
      type: object
    PositionReportingDetails:
      description: Entity details specific to a PositionReporting Entity.
      required:
      - flights_url
      type: object
      properties:
        flights_url:
          $ref: '#/components/schemas/RIDFlightsURL'
    EntityDetails:
      description: Detailed specification of obstacle, thing, or region of special
        significance in the airspace (Constraint or Operation are concrete/specific
        types of Entities). Note that this data is not stored in the DSS; only with
        the clients. Note that this may be expanded to include other types of volume-based
        entities in the airspace.
      required:
      - id
      - type
      type: object
      properties:
        id:
          anyOf:
          - $ref: '#/components/schemas/EntityUUID'
          description: Unique identifier for this entity.  Created by client.
        type:
          $ref: '#/components/schemas/EntityType'
        extents:
          description: Volumes that wholly contain the Entity while being as small
            as practical.  This field is required unless the Entity `type` is `PositionReporting`.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        position_reporting:
          anyOf:
          - $ref: '#/components/schemas/PutPositionReportingDetails'
          description: If this Entity is a PositionReporting Entity, this property
            is required and contains details about the PositionReporting Entity.
        constraint:
          anyOf:
          - $ref: '#/components/schemas/ConstraintDetails'
          description: If this Entity is a Constraint, this property is required and
            contains details about the Constraint.
        operation:
          anyOf:
          - $ref: '#/components/schemas/OperationDetails'
          description: If this Entity is an Operation, this property is required and
            contains details about the Operation.
        awareness_provider:
          anyOf:
          - $ref: '#/components/schemas/AirspaceAwarenessProviderDetails'
          description: If this Entity is an airspace awareness provider, this property
            is required and contains details about that provider.
        signature:
          anyOf:
          - $ref: '#/components/schemas/EntitySignature'
          description: Signature for this version of this Entity.  Includes information
            about the version of this Entity.  This property is required unless Entity
            `type` is `PositionReporting`.
    RIDAircraftType:
      description: |-
        Type of aircraft for the purposes of remote ID.

        'LTA' means 'Lighter Than Air'.  `LTAUnpowered` is a balloon.  `VTOL` is a fixed wing aircraft that can take off vertically.
      enum:
      - NotDeclared
      - FixedWingPowered
      - Rotorcraft
      - Multirotor
      - LTAPowered
      - LTAUnpowered
      - VTOL
      - FreeFall
      - Parachute
      - Rocket
      - Glider
      - Tethered
      - GroundObstacle
      - Other
      type: string
    RIDOperationalStatus:
      description: Indicates operational status of associated aircraft.
      enum:
      - Undeclared
      - Ground
      - Airborne
      type: string
    RIDAuthData:
      description: Additional authentication data.
      required:
      - format
      - data
      type: object
      properties:
        format:
          description: Format of additional authentication data.
          type: string
        data:
          description: Authentication data in form specified by `format`.
          type: string
    RIDHeight:
      description: A relative altitude for the purposes of remote ID.
      required:
      - distance
      - reference
      type: object
      properties:
        distance:
          description: Distance above reference datum.  This value is provided in
            meters and must have a minimum resolution of 1 meter.
        reference:
          description: The reference datum above which the height is reported.
          enum:
          - TakeoffLocation
          - GroundLevel
    RIDAircraftState:
      description: State of an aircraft for the purposes of remote ID.
      required:
      - timestamp
      - timestamp_accuracy
      - speed
      - vertical_speed
      - direction
      - speed_accuracy
      type: object
      properties:
        timestamp:
          format: date-time
          description: Time at which this state was valid.  This may be the time coming
            from the source, such as a GPS, or the time when the system computes the
            values using an algorithm such as an Extended Kalman Filter (EKF).  Timestamp
            must be expressed with a minimum resolution of 1/10th of a second.
          type: string
        timestamp_accuracy:
          format: float
          description: Declaration of timestamp accuracy in seconds, precise to at
            least 10ths of a second, to determine time of applicability.
          minimum: 0
          exclusiveMinimum: false
          type: number
        operational_status:
          $ref: '#/components/schemas/RIDOperationalStatus'
        direction:
          format: float
          description: Direction of flight expressed as a "True North-based" ground
            track angle.  This value is provided in degrees with a minimum resolution
            of 1 degree.
          maximum: 360
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: number
        heading:
          format: float
          description: Orientation of the aircraft's nose, degrees East of North.
          maximum: 360
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: number
          example: 285
        speed:
          format: float
          description: Ground speed of flight in meters per second.  Minimum resolution
            of 0.25 m/s.
          minimum: 0
          exclusiveMinimum: false
          type: number
          example: 1.9
        speed_accuracy:
          format: float
          description: 'TODO: provide better description'
          minimum: 0
          exclusiveMinimum: true
          type: number
        vertical_speed:
          format: float
          description: Ground speed up (vertically), m/s.
          type: number
          example: 0.2
        pressure_altitude:
          format: float
          description: The uncorrected altitude (based on reference standard 29.92
            inHg, 1013.25 mb) provides a reference for algorithms that utilize "altitude
            deltas" between aircraft.  This value is provided in meters and must have
            a minimum resolution of 1 meter.
          type: number
        height:
          $ref: '#/components/schemas/RIDHeight'
        group_radius:
          format: float
          description: Farthest horizontal distance from reported group location of
            an aircraft in the group (meters).
          minimum: 0
          exclusiveMinimum: true
          type: number
        group_height:
          format: float
          description: 'Max height (AGL) of group operation (TODO: improve this description)'
          type: number
    GetFlightDetailsResponse:
      description: Response to remote ID provider query for details about a specific
        flight.
      required:
      - details
      type: object
      properties:
        details:
          $ref: '#/components/schemas/RIDFlightDetails'
    RIDFlightDetails:
      description: Details about a flight reported by a remote ID service provider.  At
        least one of the registration or serial fields must be filled if required
        by CAA.
      required:
      - id
      type: object
      properties:
        id:
          description: ID for this flight, matching argument in request.
          type: string
          example: a3423b-213401-0023
        registration:
          description: Country/State registration number of the aircraft.
          type: string
          example: FA12345897
        serial:
          description: Serial number of the aircraft.
          type: string
          example: INTCJ123-4567-890
        aircraft_make:
          description: Manufacturer of aircraft.
          type: string
          example: DJI
        aircraft_model:
          description: Model of aircraft.
          type: string
          example: Inspire 2
        operator_id:
          description: 'CAA-issued registration/license ID for the remote pilot or
            operator. '
          type: string
        operator_location:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Location of party controlling the aircraft.
        responsible_party_name:
          description: Display name of responsible party for this flight.
          type: string
          example: My USS
        responsible_party_url:
          description: URL where more information about the responsible party for
            this flight may be found.
          type: string
          example: https://myuss.com
        operation_description:
          description: Free-text field that enables the operator to describe the purpose
            of a flight, if so desired.
          type: string
          example: SafeFlightDrone company doing survey. See my privacy policy www.sfd.com/privacy.
        takeoff_location:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Location of the takeoff point for this flight.
        immediate_destination_location:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Location of the current destination of the aircraft.
        ultimate_destination_location:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Location where the aircraft will be at the end of this flight.
        group_count:
          format: int32
          description: When operating a group (or formation or swarm), number of aircraft
            in group.
          minimum: 1
          exclusiveMinimum: false
          type: integer
        auth_data:
          $ref: '#/components/schemas/RIDAuthData'
    HorizontalAccuracy:
      description: |-
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAs.

        `HAUnknown`: Unknown horizontal accuracy

        `HA10NMPlus`: > 10NM (18.52km)

        `HA10NM`: < 10NM (18.52km)

        `HA4NM`: < 4NM (7.408km)

        `HA2NM`: < 2NM (3.704km)

        `HA1NM`: < 1NM (1852m)

        `HA05NM`: < 0.5NM (926m)

        `HA03NM`: < 0.3NM (555.6m)

        `HA01NM`: < 0.1NM (185.2m)

        `HA005NM`: < 0.05NM (92.6m)

        `HA30m`: < 30m

        `HA10m`: < 10m

        `HA3m`: < 3m

        `HA1m`: < 1m
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m
      type: string
    VerticalAccuracy:
      description: |-
        This is the GVA enumeration from ADS-B, plus some finer values for UAs.

        `VAUnknown`: Unknown vertical accuracy

        `VA150mPlus`: > 150m

        `VA150m`: < 150m

        `VA45m`: < 45m

        `VA25m`: < 25m

        `VA10m`: < 10m

        `VA3m`: < 3m

        `VA1m`: < 1m
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m
      type: string
    RIDAircraftPosition:
      description: Position of an aircraft as reported for remote ID purposes.
      required:
      - lat
      - lng
      - alt
      - time
      type: object
      properties:
        time:
          format: date-time
          description: The time of applicability of position information.  This may
            be the time coming from the source, such as a GPS, or the time when the
            system computes the values using an algorithm such as an Extended Kalman
            Filter (EKF).  Timestamps must be expressed with a minimum resolution
            of 1/10th of a second.
          type: string
        time_accuracy:
          format: float
          description: Declaration of timestamp accuracy in seconds, precise to at
            least 10ths of a second, to determine time of applicability.  Required
            for most recent non-extrapolated position entry.
          minimum: 0
          exclusiveMinimum: false
          type: number
        lat:
          $ref: '#/components/schemas/Latitude'
        lng:
          $ref: '#/components/schemas/Longitude'
        alt:
          format: float
          description: 'Geodetic altitude (NOT altitude above launch, altitude above
            ground, or EGM96): aircraft distance above the WGS84 ellipsoid as measured
            along a line that passes through the aircraft and is normal to the surface
            of the WGS84 ellipsoid.  This value is provided in meters and must have
            a minimum resolution of 1 meter.'
          type: number
          example: 1321.2
        accuracy_h:
          anyOf:
          - $ref: '#/components/schemas/HorizontalAccuracy'
          description: Horizontal error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            most recent non-extrapolated position entry.
        accuracy_v:
          anyOf:
          - $ref: '#/components/schemas/VerticalAccuracy'
          description: Vertical error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            most recent non-extrapolated position entry.
        extrapolated:
          description: True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.  Assumed false
            if not specified.
          type: boolean
    RIDFlight:
      description: Description of a remote ID flight.  If `last_poll` is specified
        in query, only fields that have changed since the specified timestamp must
        be included, with the exception that `id` must always be included.
      required:
      - id
      - aircraft_type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RIDFlightID'
        aircraft_type:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftType'
          description: Generic type of aircraft.
        aircraft_icon_url:
          anyOf:
          - $ref: '#/components/schemas/URL'
          description: The location at which a custom icon for this aircraft or aircraft
            type may be found
          example: https://myuss.com/aircraft/myaircraft.png
        current_state:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftState'
          description: The most up-to-date state of the aircraft.  Required unless
            `volumes` is specified.
        position_history:
          description: A short history of recent aircraft movement including at least
            one entry (current position).  If `last_poll` is specified in query, only
            entries since that timestamp should be included.  Under no circumstances
            should more than 60 seconds of history be included.  If `volumes` is not
            specified, this field is required.
          type: array
          items:
            $ref: '#/components/schemas/RIDAircraftPosition'
        volumes:
          description: The set of spacetime volumes the aircraft is within.  If `position_history`
            is not specified, this field is required.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
  securitySchemes:
    AuthFromJurisdictionalAuthority:
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            dss.read.position_reporting_entities: Client may query, read, or create
              subscriptions for PositionReporting Entities for remote ID.  Does not
              provide access to UTM-related Entities.  A remote ID display provider
              would use this scope.
            dss.write.position_reporting_entities: Client may create, edit, and delete
              PositionReporting Entities for remote ID.  A remote ID service provider
              would use this scope.
            dss.read.airspace_awareness: In addition to `dss.read.position_reporting_entities`,
              client may query or read Entities related to airspace awareness.  A
              VLOS airspace awareness provider might use this scope.
            dss.write.airspace_awareness: In addition to `dss.read.airspace_awareness`,
              client may create airspace awareness Entities.  A VLOS airspace awareness
              provider would likely use this scope.
            dss.write.operations: In addition to `dss.write.airspace_awareness`, client
              may query, read, and create Operation Entities.  A strategic planning
              UTM provider would use this scope.
            dss.write.constraints: Client may create un-deconflicted constraints in
              the airspace.  A client acting on behalf of a governmental organization
              would use this scope.
      type: oauth2
      description: Authorization from, or on behalf of, a jurisdiction-having authority.  The
        `aud` field in access tokens from this authority must be specified.  Multiple
        scopes may be requested for a single token.
security:
- AuthFromJurisdictionalAuthority:
  - dss.read.position_reporting_entities
  - dss.write.position_reporting_entities
  - dss.read.airspace_awareness
  - dss.write.airspace_awareness
  - dss.write.operations
  - dss.write.constraints
tags:
- name: dss
  description: Endpoints exposed by the DSS server.
- name: p2p_rid
  description: Endpoints exposed by remote ID service providers for peer-peer communication.
- name: dar
  description: Pseudo-endpoint actions used by DSS instances to synchronize DSS airspace
    representation cell information.
- name: p2p_entities
  description: Endpoints exposed by DSS clients for peer-peer communication of Entity
    details, including DSS-triggered subscription notifications.
